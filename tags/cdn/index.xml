<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cdn on JDHeyburn</title><link>https://jdheyburn.co.uk/tags/cdn/</link><description>Recent content in cdn on JDHeyburn</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 12 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://jdheyburn.co.uk/tags/cdn/index.xml" rel="self" type="application/rss+xml"/><item><title>Who Goes Blogging 2: Custom Domain</title><enclosure url="https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/namecheap_landing.png" type="image/jpg"/><link>https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/</link><pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/</guid><description>&amp;lt;p&amp;gt;In the &amp;lt;a href=&amp;#34;/posts/who-goes-blogging-1-getting-started/&amp;#34;&amp;gt;previous post&amp;lt;/a&amp;gt;, we got ourselves up and running with a website generated by Hugo, deployed to GitHub, and hosted by GitHub Pages.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Now, we&amp;amp;rsquo;re going to add a custom domain to our website so that we hide the &amp;lt;code&amp;gt;&amp;amp;lt;username&amp;amp;gt;.github.io&amp;lt;/code&amp;gt; domain that GitHub Pages is kindly hosting for us for free.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;At the same time, we&amp;amp;rsquo;re going to make our website blazingly fast for users by adding a caching layer with a content distribution network (CDN).&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Lastly, I&amp;amp;rsquo;m going to throw in a bonus guide on how to redirect from multiple top-level domains (TLDs) to one (e.g. &amp;lt;code&amp;gt;&amp;amp;lt;your-domain&amp;amp;gt;.com&amp;lt;/code&amp;gt; redirects to &amp;lt;code&amp;gt;&amp;amp;lt;your-domain&amp;amp;gt;.co.uk&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;pre-requisites&amp;#34;&amp;gt;Pre-requisites&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;There&amp;amp;rsquo;s not much more to add from the last post. I talk a lot about domains and domain name system (DNS), which is the address-finder of the Internet, and an entirely huge beast in its own right.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Again - I won&amp;amp;rsquo;t try to replicate already great guides out there on the topic. So if you&amp;amp;rsquo;d like to find out more, see below for some helpful guides.&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts&amp;#34;&amp;gt;https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://opensource.com/article/17/4/introduction-domain-name-system-dns&amp;#34;&amp;gt;https://opensource.com/article/17/4/introduction-domain-name-system-dns&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;applying-a-custom-domain-to-github-pages&amp;#34;&amp;gt;Applying a Custom Domain to GitHub Pages&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Let&amp;amp;rsquo;s add a degree of professionalism to our site by having a custom domain apply to it. You&amp;amp;rsquo;ll need to make sure you own a domain first before you go ahead, so have a look at a few providers and see which works best for you &amp;lt;a href=&amp;#34;https://www.techradar.com/uk/news/best-domain-registrars-in-2019&amp;#34;&amp;gt;from a comparison list&amp;lt;/a&amp;gt;. I bought mine from &amp;lt;a href=&amp;#34;https://www.namecheap.com/&amp;#34;&amp;gt;namecheap&amp;lt;/a&amp;gt; just because of the price and WhoisGuard features. There may be other providers that have the same features, so make sure to make your own comparison!&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;In the case of &amp;lt;code&amp;gt;.co.uk&amp;lt;/code&amp;gt; domains, because it is a UK domain that resides in the EU (for now), the WhoIS lookup is disabled by default - which is a huge win for privacy. WhoisGuard is available for non-EU domains and I highly recommend it.&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;GitHub has a &amp;lt;a href=&amp;#34;https://help.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site&amp;#34;&amp;gt;series of documentation&amp;lt;/a&amp;gt; on applying a custom domain to GitHub Pages in much greater detail than what I am about to write out, should you wish to find out more information.&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;acquire-a-domain&amp;#34;&amp;gt;Acquire a Domain&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;The rest of the post will depict a lot of Namecheap semantics, since that is the registrar I have access to. You can choose to follow the guide alongside a different registrar if you wish, at a high-level they will be pretty similar. For now, let&amp;amp;rsquo;s move on ahead with Namecheap and navigate through to the &amp;lt;a href=&amp;#34;https://www.namecheap.com/&amp;#34;&amp;gt;domain purchase page&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;a href=&amp;#34;namecheap_landing.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/namecheap_landing.png&amp;#34;
alt=&amp;#34;Screenshot depicting the namecheap domain landing page&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;figcaption&amp;gt;
&amp;lt;p&amp;gt;The hardest part is deciding on the domain name&amp;amp;hellip;&amp;lt;/p&amp;gt;
&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;a href=&amp;#34;namecheap-domain-purchase.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/namecheap-domain-purchase.png&amp;#34;
alt=&amp;#34;Screenshot depicting the namecheap domain purchase page&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;p&amp;gt;Once you&amp;amp;rsquo;ve set up an account and purchased your domain, your accounts domain landing page will look something like the below.&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;a href=&amp;#34;namecheap-domain-acquired.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/namecheap-domain-acquired.png&amp;#34;
alt=&amp;#34;Screenshot depicting the namecheap domain landing page&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;figcaption&amp;gt;
&amp;lt;p&amp;gt;Make sure you have auto-renew selected, otherwise you can kiss that domain goodbye when it expires!&amp;lt;/p&amp;gt;
&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;p&amp;gt;When you purchase a domain from Namecheap, by default it will be pointing to their own domain name service (DNS) nameservers, as you can see from the picture above.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This means when we type in our new domain into a browser, it will contact Namecheap for the IP address for that record.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Currently Namecheap is none the wiser about these records, which isn&amp;amp;rsquo;t very exciting. Let&amp;amp;rsquo;s move on to adding the CDN for the website.&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;adding-our-cdn-layer&amp;#34;&amp;gt;Adding Our CDN Layer&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;As discussed in a &amp;lt;a href=&amp;#34;/posts/who-goes-blogging-0-applying-cartography/#supercharge-your-delivery&amp;#34;&amp;gt;previous post&amp;lt;/a&amp;gt;, a CDN can provide us with many benefits. Go check out the page for a refresher of what those are and for why I selected Cloudflare. You can use whichever you like, however the remainder of this guide will focus on Cloudflare in particular - the concepts can still be applied at a high level to other CDNs.&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Like with any introduction of an architectural component, a CDN has some drawbacks, such as making your service now dependent on a third party for which you have no control over. Namely Cloudflare in particular has had some high profile outages of recent date, but has been extremely reliable in my previous experiences with them.&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;You can go &amp;lt;a href=&amp;#34;https://blog.webnames.ca/advantages-and-disadvantages-of-a-content-delivery-network/&amp;#34;&amp;gt;here&amp;lt;/a&amp;gt; for a list of pros and cons of CDNs. Given this information I believe you can make your own mind up on what is best for yourself. For me, I the benefits far outweigh the downsides.&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;h3 id=&amp;#34;cloudflare-our-domain&amp;#34;&amp;gt;Cloudflare our Domain&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Create an account with &amp;lt;a href=&amp;#34;https://www.cloudflare.com/&amp;#34;&amp;gt;Cloudflare&amp;lt;/a&amp;gt; if you haven&amp;amp;rsquo;t done so already. Once done you&amp;amp;rsquo;ll need to click &amp;lt;strong&amp;gt;Add Site&amp;lt;/strong&amp;gt; at the top of the browser dashboard. Enter your newly purchased domain from the previous section.&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;a href=&amp;#34;cloudflare-add-domain.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/cloudflare-add-domain.png&amp;#34;
alt=&amp;#34;Screenshot depicting the Cloudflare add domain page&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;figcaption&amp;gt;
&amp;lt;p&amp;gt;Enter your newly purchased domain from the previous section&amp;lt;/p&amp;gt;
&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;p&amp;gt;Go ahead now and select the free plan, if you want to &amp;lt;a href=&amp;#34;https://www.cloudflare.com/en-gb/plans/&amp;#34;&amp;gt;go more advanced&amp;lt;/a&amp;gt; then you can do so.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Once that&amp;amp;rsquo;s created you&amp;amp;rsquo;ll see Cloudflare scan the DNS records for this domain you&amp;amp;rsquo;ve added - for now let&amp;amp;rsquo;s navigate back to the &amp;lt;a href=&amp;#34;https://dash.cloudflare.com/&amp;#34;&amp;gt;Cloudflare Dashboard&amp;lt;/a&amp;gt; and selecting the domain. You&amp;amp;rsquo;ll be presented with a page similar to below, minus all the activity!&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;a href=&amp;#34;cloudflare-domain-landing.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/cloudflare-domain-landing.png&amp;#34;
alt=&amp;#34;Screenshot depicting the Cloudflare domain home page&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;figcaption&amp;gt;
&amp;lt;p&amp;gt;Name me a more iconic duo than numbers and graphs. I&amp;amp;rsquo;ll wait&amp;amp;hellip;&amp;lt;/p&amp;gt;
&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;h3 id=&amp;#34;update-cloudflare-dns-records&amp;#34;&amp;gt;Update Cloudflare DNS Records&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;In order for Cloudflare to provide its benefits, it acts as the DNS server for your domain. This means that it will forward requests of our website to the IP addresses where our website is being hosted. It&amp;amp;rsquo;s place in the topology is like this:&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-fallback&amp;#34; data-lang=&amp;#34;fallback&amp;#34;&amp;gt;1. Domain registrar ---&amp;amp;gt; 2. DNS server and CDN provider ---&amp;amp;gt; 3. Web server location
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Translated to our architecture:&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-fallback&amp;#34; data-lang=&amp;#34;fallback&amp;#34;&amp;gt;1. Namecheap ---&amp;amp;gt; 2. Cloudflare ---&amp;amp;gt; 3. GitHub Pages
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;What we need to do is instruct Cloudflare where to direct clients of the website. There are several ways of doing this, whether you want your website to be available at &amp;lt;code&amp;gt;www.&amp;amp;lt;your-domain&amp;amp;gt;.co.uk&amp;lt;/code&amp;gt; (CNAME record), or &amp;lt;code&amp;gt;&amp;amp;lt;your-domain&amp;amp;gt;.co.uk&amp;lt;/code&amp;gt; (APEX (A) record). Both of which are &amp;lt;a href=&amp;#34;https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site&amp;#34;&amp;gt;well documented by GitHub&amp;lt;/a&amp;gt; already. For the purpose of this post, I&amp;amp;rsquo;ll guide you on my set up which is an ALIAS record.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Back to Cloudflare, you&amp;amp;rsquo;ll need to load up the dashboard for your domain and navigate to the DNS icon in the taskbar at the top. Clicking on &amp;lt;strong&amp;gt;Add record&amp;lt;/strong&amp;gt; will allow you to add the A records that point to GitHub Pages&amp;amp;rsquo;s IP addresses. As of writing (and &amp;lt;a href=&amp;#34;https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain&amp;#34;&amp;gt;documented&amp;lt;/a&amp;gt;) they are:&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-fallback&amp;#34; data-lang=&amp;#34;fallback&amp;#34;&amp;gt;185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Let&amp;amp;rsquo;s add these to the Cloudflare DNS page below.&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;a href=&amp;#34;cloudflare-dns-record.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/cloudflare-dns-record.png&amp;#34;
alt=&amp;#34;Screenshot depicting adding DNS records to Cloudflare&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;figcaption&amp;gt;
&amp;lt;p&amp;gt;Add in the GitHub IP addresses one by one&amp;lt;/p&amp;gt;
&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;p&amp;gt;Once done - your records will look something like this:&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;a href=&amp;#34;cloudflare-completed-records.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/cloudflare-completed-records.png&amp;#34;
alt=&amp;#34;Screenshot depicting completed DNS management&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;p&amp;gt;You&amp;amp;rsquo;ll notice an additional CNAME record at the bottom for &amp;lt;code&amp;gt;www&amp;lt;/code&amp;gt;. This will redirect any requests made to &amp;lt;code&amp;gt;www.jdheyburn.co.uk&amp;lt;/code&amp;gt; to &amp;lt;code&amp;gt;jdheyburn.co.uk&amp;lt;/code&amp;gt;. This could be something you&amp;amp;rsquo;d want to replicate too if you wish.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;One thing to note down before we move on is to capture the Cloudflare DNS Nameservers that have been assigned to our domain. You can find these on the same DNS management page we are on, but by just scrolling down we can see these nameservers.&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;a href=&amp;#34;cloudflare-nameservers.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/cloudflare-nameservers.png&amp;#34;
alt=&amp;#34;Screenshot depicting completed Cloudflare DNS nameservers&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;figcaption&amp;gt;
&amp;lt;p&amp;gt;Make a note of these nameservers for your domain&amp;lt;/p&amp;gt;
&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;h3 id=&amp;#34;direct-namecheap-to-cloudflare&amp;#34;&amp;gt;Direct Namecheap to Cloudflare&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;/posts/who-goes-blogging-2-custom-domain/#acquire-a-domain&amp;#34;&amp;gt;Earlier in this post&amp;lt;/a&amp;gt;, I mentioned that a newly created Namecheap domain will default to their own DNS nameservers. We want to change this to Cloudflares DNS nameservers from which we configured our DNS records.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Navigate to the &amp;lt;a href=&amp;#34;https://ap.www.namecheap.com/domains/list/&amp;#34;&amp;gt;Namecheap management page&amp;lt;/a&amp;gt; for your domain and enter the Cloudflare nameservers once you have selected &amp;lt;strong&amp;gt;Custom DNS&amp;lt;/strong&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;figure class=&amp;#34;center&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;namecheap-nameservers.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/namecheap-nameservers.png&amp;#34;
alt=&amp;#34;Screenshot depicting completed nameservers pointing to Cloudflare&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;figcaption&amp;gt;
&amp;lt;p&amp;gt;Add in your Cloudflare domains from previously&amp;lt;/p&amp;gt;
&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;p&amp;gt;Once this is done you may need to wait a while for the DNS updates to propagate throughout the world. While we&amp;amp;rsquo;re waiting for that, there&amp;amp;rsquo;s one final piece of the puzzle which can keep us busy.&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;github-pages-configuration&amp;#34;&amp;gt;GitHub Pages Configuration&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;The last place to configure is GitHub Pages. Currently it is hosting at our &amp;lt;code&amp;gt;.github.io&amp;lt;/code&amp;gt; domain, but we need to instruct it to redirect to our custom domain. There are two methods for doing this:&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Configure the repository settings&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Use a &amp;lt;code&amp;gt;CNAME&amp;lt;/code&amp;gt; file in your repository&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;h4 id=&amp;#34;configure-the-repository-settings&amp;#34;&amp;gt;Configure the repository settings&amp;lt;/h4&amp;gt;
&amp;lt;p&amp;gt;This is the quicker of the two solutions, so I advise to follow this step to understand if you have everything in place correctly. Once done then you can lock-in your changes with step 2 above.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;For this step, you need to navigate to the settings pages for your &amp;lt;code&amp;gt;.github.io&amp;lt;/code&amp;gt; repo containing your rendered code.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-fallback&amp;#34; data-lang=&amp;#34;fallback&amp;#34;&amp;gt;https://github.com/&amp;amp;lt;USERNAME&amp;amp;gt;/&amp;amp;lt;USERNAME&amp;amp;gt;.github.io/settings
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Now scroll down, keep going until you hit the &amp;lt;strong&amp;gt;GitHub Pages&amp;lt;/strong&amp;gt; heading. Here you will see a form for entering a custom domain; do the honours and enter it in like below.&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;a href=&amp;#34;github_pages_setup.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/github_pages_setup.png&amp;#34;
alt=&amp;#34;Screenshot depicting GitHub Pages form for specifying a custom domain&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;figcaption&amp;gt;
&amp;lt;p&amp;gt;Ignore my already published domain&amp;amp;hellip;&amp;lt;/p&amp;gt;
&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;p&amp;gt;Now again wait for DNS to propagate across the world. When GitHub is happy with the changes then you will see the green banner similar to the one in the screenshot above. This means everything is being served up! Why not give it a try ourselves? Head to your domain now and see if everything is working!&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;a href=&amp;#34;jdheyburn_co_uk_custom_domain.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/jdheyburn_co_uk_custom_domain.png&amp;#34;
alt=&amp;#34;Screenshot depicting completed custom domain&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;figcaption&amp;gt;
&amp;lt;p&amp;gt;You should end up with something like this!&amp;lt;/p&amp;gt;
&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;h4 id=&amp;#34;solidying-our-changes-with-a-cname-file&amp;#34;&amp;gt;Solidying our changes with a CNAME file&amp;lt;/h4&amp;gt;
&amp;lt;p&amp;gt;We can use the above method to quickly try using GitHub repository settings to see if everything is working, however I&amp;amp;rsquo;m a big fan of setting changes in code (Infrastructure-as-code anyone?). GitHub supports another method which is to use a file named &amp;lt;code&amp;gt;CNAME&amp;lt;/code&amp;gt; in our generated &amp;lt;code&amp;gt;.github.io&amp;lt;/code&amp;gt; repo that contains the domain name we wish to use.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;In my case, I would have the following&amp;amp;hellip;&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#6272a4&amp;#34;&amp;gt;# CNAME&amp;lt;/span&amp;gt;
jdheyburn.co.uk
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;This then tells a repo that is enabled for GitHub Pages to use the domain in this file as our custom domain, effectively producing the steps in the previous section. Neato.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The change to implement this is fairly easy. I have to admit I picked it up from somewhere but I don&amp;amp;rsquo;t have the source to reference it to.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;So back in your &amp;lt;code&amp;gt;blog-source&amp;lt;/code&amp;gt; repo, you want to execute the below, replacing the template with your domain.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;echo&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;&amp;amp;lt;DOMAIN-NAME&amp;amp;gt;&amp;amp;#34;&amp;lt;/span&amp;gt; &amp;amp;gt; CNAME
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h4 id=&amp;#34;building-into-our-deploy-script&amp;#34;&amp;gt;Building into our deploy script&amp;lt;/h4&amp;gt;
&amp;lt;p&amp;gt;Once that is done, you will need to modify your &amp;lt;code&amp;gt;deploy.sh&amp;lt;/code&amp;gt; script to copy over the file into your generated Hugo site, because Hugo won&amp;amp;rsquo;t do it for you! Don&amp;amp;rsquo;t have the deploy script or need a refresher? Head back to the &amp;lt;a href=&amp;#34;/posts/who-goes-blogging-1-getting-started/#bash-script-deploying&amp;#34;&amp;gt;previous post&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;You will want to copy it after Hugo has done its thing, take a look at the Gist below - line 9 is your friend.&amp;lt;/p&amp;gt;
&amp;lt;script type=&amp;#34;application/javascript&amp;#34; src=&amp;#34;https://gist.github.com/jdheyburn/e84bab9176dc1753416637324a04603d.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;p&amp;gt;What this is doing is taking the &amp;lt;code&amp;gt;CNAME&amp;lt;/code&amp;gt; file that already exists in our &amp;lt;code&amp;gt;blog-source&amp;lt;/code&amp;gt; repo and moving it to the generated &amp;lt;code&amp;gt;public/&amp;lt;/code&amp;gt; directory which Hugo created for us. It is then this &amp;lt;code&amp;gt;public/&amp;lt;/code&amp;gt; directory that gets committed to the GitHub Pages repo.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Then that&amp;amp;rsquo;s it! Take a look at my &amp;lt;a href=&amp;#34;https://github.com/jdheyburn/jdheyburn.github.io&amp;#34;&amp;gt;finished repo&amp;lt;/a&amp;gt; and you&amp;amp;rsquo;ll see where &amp;lt;code&amp;gt;CNAME&amp;lt;/code&amp;gt; fits in.&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;bonus-tld-redirection&amp;#34;&amp;gt;Bonus: TLD Redirection&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Let me tell you a story. Your website is up and operational. You&amp;amp;rsquo;re super proud of it, and you give yourself a round of applause 👏&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;But you don&amp;amp;rsquo;t want to be the only person looking at it, you want the whole world to! You tell your parents, your significant other, the dog off the street - they all remember the name of your website, but &amp;lt;em&amp;gt;was it at &amp;lt;code&amp;gt;.com&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;.&amp;amp;lt;insert snazzy TLD here&amp;amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/em&amp;gt;?&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Of course, you domain isn&amp;amp;rsquo;t at &amp;lt;code&amp;gt;.com&amp;lt;/code&amp;gt;, that&amp;amp;rsquo;s boring as hell! You just forked out $50 on a &amp;lt;code&amp;gt;.dev&amp;lt;/code&amp;gt; TLD, and no one will see it!&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Luckily there is a way&amp;amp;hellip;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;You can buy additional domains at different TLDs and have them redirect to your &amp;lt;em&amp;gt;one-domain-to-rule-them-all&amp;lt;/em&amp;gt; with little to no hassle! There is the cost of purchasing the domain and renewing it year after year, but with that being ~£10 or so per year - I&amp;amp;rsquo;d call that a good insurance policy to ensure people land at your website!&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;In my case, I purchased &amp;lt;code&amp;gt;jdheyburn.com&amp;lt;/code&amp;gt; and had it redirect to &amp;lt;code&amp;gt;jdheyburn.co.uk&amp;lt;/code&amp;gt; - why not give it a try: &amp;lt;a href=&amp;#34;https://jdheyburn.com&amp;#34;&amp;gt;https://jdheyburn.com&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The steps are already defined in this post. For a breakdown of what they are:&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/#acquire-a-domain&amp;#34;&amp;gt;Purchase a domain&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/#cloudflare-our-domain&amp;#34;&amp;gt;Create a new website in Cloudflare&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/#update-cloudflare-dns-records&amp;#34;&amp;gt;Create a DNS A record to redirect to your correct domain&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/#direct-namecheap-to-cloudflare&amp;#34;&amp;gt;Configure Namecheap to use Cloudflare&amp;amp;rsquo;s nameservers&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;p&amp;gt;Steps 1 and 2 are pretty easy to perform yourselves - so for this exercise I&amp;amp;rsquo;ll join in at step 3.&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;cloudflare-domain-redirection&amp;#34;&amp;gt;Cloudflare Domain Redirection&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Assuming that you&amp;amp;rsquo;ve completed steps 1 and 2, we&amp;amp;rsquo;ll need to configure the redirection - but we don&amp;amp;rsquo;t do this via inserting a DNS record like we did previously, Cloudflare has a feature that handles that for us called &amp;lt;strong&amp;gt;Page Rules&amp;lt;/strong&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;On your Cloudflare website landing page, navigate to &amp;lt;strong&amp;gt;Page Rules&amp;lt;/strong&amp;gt; in the toolbar at the top and then &amp;lt;strong&amp;gt;Create Page Rule&amp;lt;/strong&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;a href=&amp;#34;cloudflare_page_rules.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/cloudflare_page_rules.png&amp;#34;
alt=&amp;#34;Screenshot depicting how to access the Create Page Rule feature&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;p&amp;gt;In the next screen we&amp;amp;rsquo;re going to define the rule. Cloudflare have &amp;lt;a href=&amp;#34;https://support.cloudflare.com/hc/en-us/categories/200276257-Page-Rules&amp;#34;&amp;gt;documentation on Page Rules&amp;lt;/a&amp;gt;, and even more &amp;lt;a href=&amp;#34;https://support.cloudflare.com/hc/en-us/articles/200172286-Configuring-URL-forwarding-or-redirects-with-Cloudflare-Page-Rules&amp;#34;&amp;gt;specifically on redirection&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;From this screen you will want something that appears as below.&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;a href=&amp;#34;cloudflare_new_page_rule.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/cloudflare_new_page_rule.png&amp;#34;
alt=&amp;#34;Screenshot depicting how to populate the Create Page Rule form&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;p&amp;gt;Let&amp;amp;rsquo;s break down what&amp;amp;rsquo;s happening here:&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;We define a pattern of &amp;lt;code&amp;gt;*jdheyburn.com/*&amp;lt;/code&amp;gt;, indicating that the rule is active should a URL be queried to Cloudflare&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;This pattern will match any request at this domain&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Next comes the rule action, which is:&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Set this URL as a forwarding URL - to reply back to the client with &amp;lt;code&amp;gt;301 Permanent Redirect&amp;lt;/code&amp;gt; status code&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;With the forwarded URL being &amp;lt;code&amp;gt;https://jdheyburn.co.uk/$2&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;/$2&amp;lt;/code&amp;gt; at the end of the rule is crucial here. This will carry across any URL path parameters or query parameters to the redirected URL. In fact &amp;lt;code&amp;gt;$2&amp;lt;/code&amp;gt; refers to anything that matches the second asterisk (&amp;lt;code&amp;gt;*&amp;lt;/code&amp;gt;) in the rule pattern (&amp;lt;code&amp;gt;*jdheyburn.com/*&amp;lt;/code&amp;gt;). So &amp;lt;code&amp;gt;https://jdheyburn.com/contact&amp;lt;/code&amp;gt; will redirect to &amp;lt;code&amp;gt;https://jdheyburn.co.uk/contact&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;Having the forwarded URL set to the &amp;lt;code&amp;gt;https://&amp;lt;/code&amp;gt; scheme will ensure that your users will receive your website encrypted, safe from man-in-the-middle attacks.&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;Lastly, click on &amp;lt;strong&amp;gt;Save and Deploy&amp;lt;/strong&amp;gt; to finalise your changes; you&amp;amp;rsquo;ll have a view such as below.&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;a href=&amp;#34;cloudflare_completed_page_rule.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/cloudflare_completed_page_rule.png&amp;#34;
alt=&amp;#34;Screenshot depicting the newly created page rule&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;p&amp;gt;That&amp;amp;rsquo;s all you need - once again you will have to wait for DNS replication to trickle down. You can repeat this over again for other domains you may have.&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;#34;conclusion&amp;#34;&amp;gt;Conclusion&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;That it for this part, we covered quite a lot of things:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Purchasing a custom domain&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Applying a CDN cache layer&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;HTTPS redirection&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Redirect multiple domains to one location&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;Next up I&amp;amp;rsquo;ll document the various deployment methods I have used for the website.&amp;lt;/p&amp;gt;</description></item><item><title>Who Goes Blogging 1: Getting Started</title><enclosure url="https://jdheyburn.co.uk/blog/who-goes-blogging-1-getting-started/local_example_site.jpg" type="image/jpg"/><link>https://jdheyburn.co.uk/blog/who-goes-blogging-1-getting-started/</link><pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/who-goes-blogging-1-getting-started/</guid><description>&amp;lt;p&amp;gt;I&amp;amp;rsquo;ve done a lot of talking about how this website is currently, but let&amp;amp;rsquo;s talk about how you can get set up with the same as I have done here. Let&amp;amp;rsquo;s recap exactly what that is:&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;A GitHub repo with the site source code&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Another GitHub project with the rendered site&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Hosted on GitHub Pages&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Fronted by a custom domain&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Globally cached by a CDN&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Redirecting multiple domains&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;p&amp;gt;We&amp;amp;rsquo;ll cover the first three points in this post, with the remainder to come in a follow up post.&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;pre-requisites--assumptions&amp;#34;&amp;gt;Pre-requisites &amp;amp;amp; Assumptions&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;These series of posts is aimed at between the newcomer, to intermediate programmer. There may be some concepts which I won&amp;amp;rsquo;t be covering to due brevity, and because there are several guides out there who have explained these concepts better than I could.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Having said that, I assume you are comfortable with the following:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Navigating your way through a terminal&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Happy with the basic set of &amp;lt;code&amp;gt;git&amp;lt;/code&amp;gt; commands&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Understand how website requests are made (though this isn&amp;amp;rsquo;t crucial)&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2 id=&amp;#34;hugo-static-site-builder&amp;#34;&amp;gt;Hugo Static Site Builder&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;There are many website building platforms out there for your static sites. There is no one platform to rule them all, you should decide on which one works best for you. For myself, I wanted to explore further into the realm of Golang as a learning opportunity. I&amp;amp;rsquo;ve built websites from scratch before from basic HTML, CSS, and JavaScript all the way to using frameworks such as React and Angular.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;However while using these frameworks provide you with the highest flexibility in terms of customisability, they can take a while to get something out there and hosted, when really you just want something to generate the HTML and CSS for you and allow you to focus on the content.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;That&amp;amp;rsquo;s where static site frameworks come in. They usually have some opinionated folder structure and some nuances on how things in a website should be, but comply by these rules and the website will be generated for you! Once such example is &amp;lt;a href=&amp;#34;https://gohugo.io/&amp;#34;&amp;gt;Hugo&amp;lt;/a&amp;gt; - which is what this website is built on; it&amp;amp;rsquo;s opensource and written in Golang, you can even check out the &amp;lt;a href=&amp;#34;https://github.com/gohugoio/hugo&amp;#34;&amp;gt;source code&amp;lt;/a&amp;gt; to see how it works!&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;While Hugo itself is free and comes with a bunch of &amp;lt;a href=&amp;#34;https://themes.gohugo.io/&amp;#34;&amp;gt;themes&amp;lt;/a&amp;gt; you can use for free, there are fancier and more feature-rich themes available to purchase from designers which may have a cost attached to them.&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;Hugo isn&amp;amp;rsquo;t the only static site framework out there, there are plenty more too each with their own pros and cons. I won&amp;amp;rsquo;t aim to reproduce a complete list of comparisons against other platforms, other people have already made the comparisons much better than I could! But nevertheless, some that I am aware of off the top of my head are &amp;lt;a href=&amp;#34;https://jekyllrb.com/&amp;#34;&amp;gt;Jekyll&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;#34;https://ghost.org/&amp;#34;&amp;gt;Ghost&amp;lt;/a&amp;gt;, and the infamous &amp;lt;a href=&amp;#34;https://wordpress.com/&amp;#34;&amp;gt;WordPress&amp;lt;/a&amp;gt; - so investigate using your search engine of choice if you wish to know the differences.&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;UPDATE 2019-11-30&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I came across &amp;lt;a href=&amp;#34;https://news.ycombinator.com/item?id=21616149&amp;#34;&amp;gt;this thread&amp;lt;/a&amp;gt; on HackerNews which ultimately lead me to these comparison websites for static site generators:&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://www.staticgen.com/&amp;#34;&amp;gt;https://www.staticgen.com/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://staticsitegenerators.net/&amp;#34;&amp;gt;https://staticsitegenerators.net/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;All set on Hugo? Awesome - let&amp;amp;rsquo;s get started on some project foundations.&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;git-set-up&amp;#34;&amp;gt;Git Set Up&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;I mentioned before I split my website into two repos:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/jdheyburn/jdheyburn.co.uk&amp;#34;&amp;gt;jdheyburn.co.uk&amp;lt;/a&amp;gt; holds all the source code&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://github.com/jdheyburn/jdheyburn.github.io&amp;#34;&amp;gt;jdheyburn.github.io&amp;lt;/a&amp;gt; holds the rendered website&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;For the first repo, it doesn&amp;amp;rsquo;t really matter what you call it - you can call it your destined domain name, or &amp;lt;code&amp;gt;blog-source&amp;lt;/code&amp;gt;, or &amp;lt;code&amp;gt;dogs-are-great&amp;lt;/code&amp;gt;. It&amp;amp;rsquo;s the second one which you will need to think about, where it must be &amp;lt;code&amp;gt;&amp;amp;lt;YOUR_USERNAME&amp;amp;gt;.github.io&amp;lt;/code&amp;gt; - which will ultimately be made available at &amp;lt;code&amp;gt;https://&amp;amp;lt;YOUR_USERNAME&amp;amp;gt;.github.io&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Create two &amp;lt;a href=&amp;#34;https://github.com/new&amp;#34;&amp;gt;empty Github repos now&amp;lt;/a&amp;gt;, then clone both to your environment. If you don&amp;amp;rsquo;t have git available in your terminal, check out &amp;lt;a href=&amp;#34;https://help.github.com/en/github/getting-started-with-github/set-up-git&amp;#34;&amp;gt;this guide&amp;lt;/a&amp;gt; to get set up.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;mkdir ~/projects
&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;cd&amp;lt;/span&amp;gt; projects
git clone https://github.com/&amp;amp;lt;USERNAME&amp;amp;gt;/blog-source.git
git clone https://github.com/&amp;amp;lt;USERNAME&amp;amp;gt;/&amp;amp;lt;USERNAME&amp;amp;gt;.github.io.git
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Now that we have the repos set up, let&amp;amp;rsquo;s get started on building the website templates.&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;blog-bootstrapping&amp;#34;&amp;gt;Blog Bootstrapping&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Before you get started, you&amp;amp;rsquo;re going to need to install Hugo - head to &amp;lt;a href=&amp;#34;https://gohugo.io/getting-started/installing&amp;#34;&amp;gt;this page&amp;lt;/a&amp;gt; for instructions on going so. Once done continue on below.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Firstly you would need to create your Hugo template. You can do this from either executing &amp;lt;code&amp;gt;hugo new &amp;amp;lt;site|theme&amp;amp;gt;&amp;lt;/code&amp;gt; and building up from there - or do what I did which was to browse the &amp;lt;a href=&amp;#34;https://themes.gohugo.io/&amp;#34;&amp;gt;Hugo themes&amp;lt;/a&amp;gt; and &amp;lt;code&amp;gt;git clone&amp;lt;/code&amp;gt; the example site for the chosen theme and then make your changes around that. It may entirely depend on your learning approach which way works best for you.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;In my case, I wanted to get up and running in the smallest time possible (isn&amp;amp;rsquo;t that the point of static site generators?), so I followed the approach above.&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;serves-up&amp;#34;&amp;gt;Serves Up!&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;The theme this blog uses as of publication is &amp;lt;a href=&amp;#34;https://themes.gohugo.io/hugo-coder/&amp;#34;&amp;gt;hugo-coder&amp;lt;/a&amp;gt;, written by &amp;lt;a href=&amp;#34;https://luizdepra.dev/&amp;#34;&amp;gt;Luiz de Prá&amp;lt;/a&amp;gt;. You may wish to use it, or something else. It&amp;amp;rsquo;s entirely up to you! Let&amp;amp;rsquo;s get started by laying down the foundations and cloning the theme.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;cd&amp;lt;/span&amp;gt; ~/projects
git clone https://github.com/luizdepra/hugo-coder.git
cp -r hugo-coder/exampleSite blog-source
mkdir blog-source/themes
ln -s ~/projects/hugo-coder blog-source/themes/hugo-coder
&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;cd&amp;lt;/span&amp;gt; blog-source
hugo serve
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;That last command will locally serve the example site, so that you can view it at &amp;lt;code&amp;gt;http://localhost:1313/&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;a href=&amp;#34;local_example_site.jpg&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-1-getting-started/local_example_site.jpg&amp;#34;
alt=&amp;#34;Screenshot depicting the locally run example site&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;figcaption&amp;gt;
&amp;lt;p&amp;gt;Success!&amp;lt;/p&amp;gt;
&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;h3 id=&amp;#34;experimenting&amp;#34;&amp;gt;Experimenting&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Once you have the site hosted locally, feel free to make as many changes as you like to gain an understanding of how everything plugs together.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;blog-template/config.toml&amp;lt;/code&amp;gt; file will contain the majority of configurations that are used to generate the site. Go ahead and even comment out some config and see what affect that has. You can even &amp;lt;a href=&amp;#34;https://github.com/jdheyburn/jdheyburn.co.uk/blob/master/config.toml&amp;#34;&amp;gt;be nosey at my config file&amp;lt;/a&amp;gt; if you&amp;amp;rsquo;re looking for some inspiration! The &amp;lt;code&amp;gt;hugo serve&amp;lt;/code&amp;gt; command will watch all files in the directory for any changes you make, rebuild them, and refresh your webpage too with the changes - making for hasty development!&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The Hugo config file will be a source of many informations, and the &amp;lt;a href=&amp;#34;https://gohugo.io/getting-started/configuration/&amp;#34;&amp;gt;documentation for it is very thorough&amp;lt;/a&amp;gt;. While we&amp;amp;rsquo;re on the subject, the rest of the Hugo documentation is great, so check the rest of it out if you haven&amp;amp;rsquo;t done so already - particularly how the &amp;lt;a href=&amp;#34;https://gohugo.io/getting-started/directory-structure/&amp;#34;&amp;gt;directories are structured&amp;lt;/a&amp;gt;, and how &amp;lt;a href=&amp;#34;https://gohugo.io/content-management/&amp;#34;&amp;gt;content is managed&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I advise you now go off and explore all the customisation options for your site, when you&amp;amp;rsquo;re ready to have it deployed, continue on reading.&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;theme-git-submodules&amp;#34;&amp;gt;Theme Git Submodules&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;When we were setting up the &amp;lt;code&amp;gt;exampleSite&amp;lt;/code&amp;gt; locally, we created a symlink from &amp;lt;code&amp;gt;~/projects/blog-source/themes/hugo-coder&amp;lt;/code&amp;gt; -&amp;amp;gt; &amp;lt;code&amp;gt;~/projects/hugo-coder&amp;lt;/code&amp;gt;. This is okay for local development, however not particularly the best practice in the real world. We want to take an existing git repo (hugo-coder) and apply that to a directory in our project, but what we &amp;lt;em&amp;gt;don&amp;amp;rsquo;t&amp;lt;/em&amp;gt; want to do is duplicate the code in our own repo.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This problem is solved exactly by &amp;lt;a href=&amp;#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&amp;#34;&amp;gt;&amp;lt;strong&amp;gt;git submodules&amp;lt;/strong&amp;gt;&amp;lt;/a&amp;gt;, and we define it within the &amp;lt;code&amp;gt;.gitmodules&amp;lt;/code&amp;gt; file of our source code repo.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#6272a4&amp;#34;&amp;gt;# .gitmodules&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;[&amp;lt;/span&amp;gt;submodule &amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;themes/hugo-coder&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;]&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;path&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; themes/hugo-coder
&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;url&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; https://github.com/luizdepra/hugo-coder.git
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Now when this file is checked into the repo, any future clones will also include the hugo theme as a submodule in the &amp;lt;code&amp;gt;themes/hugo-coder&amp;lt;/code&amp;gt; directory.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Once you&amp;amp;rsquo;ve done this, your source code is all set! Why not share it with the rest of the world?&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;releasing-into-the-wild&amp;#34;&amp;gt;Releasing into the wild&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;So far we have only been playing with the &amp;lt;code&amp;gt;hugo serve&amp;lt;/code&amp;gt; command, which is great for local development but not for production. There is a more appropriate command for building hugo projects - aptly named &amp;lt;code&amp;gt;hugo&amp;lt;/code&amp;gt;; pretty simple right?&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;hugo
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;This renders the HTML and CSS files from your config and markdown for the theme and places them in the &amp;lt;code&amp;gt;public/&amp;lt;/code&amp;gt; directory of your source code repo. In theory once you&amp;amp;rsquo;ve executed this command you can host a webserver at that address and everything would operate as normal. Why not give it a try?&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;cd&amp;lt;/span&amp;gt; public/
python -m SimpleHTTPServer &amp;lt;span style=&amp;#34;color:#bd93f9&amp;#34;&amp;gt;8080&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;We can even go one step further by adding flags to the &amp;lt;code&amp;gt;hugo&amp;lt;/code&amp;gt; command, such as &amp;lt;code&amp;gt;--minify&amp;lt;/code&amp;gt; which will minimalise all the supported files into a much smaller size, resulting in faster load times for your users.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Since we are still in our source code repo, we want to make sure that &amp;lt;code&amp;gt;public/&amp;lt;/code&amp;gt; directory doesn&amp;amp;rsquo;t get included in future commits. This is because the &amp;lt;code&amp;gt;blog-source&amp;lt;/code&amp;gt; repo should be entirely for source code, our other repo is the one that holds the rendered code.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;For this we can utilise a &amp;lt;code&amp;gt;.gitignore&amp;lt;/code&amp;gt; file, instructing git to ignore any files that match the terms in the contents. Let&amp;amp;rsquo;s get one created now and check our code into the repo.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;echo&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;public/\nresources/&amp;amp;#34;&amp;lt;/span&amp;gt; &amp;amp;gt; .gitignore
git add .
git commit -m &amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#39;Initial commit&amp;amp;#39;&amp;lt;/span&amp;gt;
git push
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;We&amp;amp;rsquo;re currently committing to one repo, however we want GitHub Pages to host it for us. As mentioned earlier, GP can only host repos at the domain &amp;lt;code&amp;gt;github.io&amp;lt;/code&amp;gt;, so we need to get our rendered website into that repo.&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;bash-script-deploying&amp;#34;&amp;gt;Bash Script Deploying&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Now the original way I did this was through a simple bash script which largely followed &amp;lt;a href=&amp;#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/#step-by-step-instructions&amp;#34;&amp;gt;this process&amp;lt;/a&amp;gt; as documented by the Hugo team. Note that this is largely the process we have followed thus far, with the exception of step 6 onwards - so ensure you follow those steps.&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;I&amp;amp;rsquo;ve since moved over onto a CI/CD platform which I will discuss in a future post.&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;After following the process in the link prior, you should be able to invoke your deploy script at &amp;lt;code&amp;gt;./deploy.sh&amp;lt;/code&amp;gt;, which will push the built &amp;lt;code&amp;gt;public/&amp;lt;/code&amp;gt; directory to your &amp;lt;code&amp;gt;&amp;amp;lt;USERNAME&amp;amp;gt;.github.io&amp;lt;/code&amp;gt;. GitHub should pick up that this is a GitHub Pages repo and have your site ready for you at &amp;lt;code&amp;gt;https://&amp;amp;lt;USERNAME&amp;amp;gt;.github.io&amp;lt;/code&amp;gt;!&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;conclusion&amp;#34;&amp;gt;Conclusion&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;In this post, we have done the following:&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Created two GitHub repos:
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;one for storing the source code for the website&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;another containing the rendered web pages&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Built Hugo locally for development using &amp;lt;code&amp;gt;hugo serve&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Written a script for deployment&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Deployed to GitHub Pages&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;p&amp;gt;Next up, we&amp;amp;rsquo;ll be adding a custom domain to the site, front it with a CDN, and redirect multiple domains to it.&amp;lt;/p&amp;gt;</description></item><item><title>Who Goes Blogging 0: Applying Cartography</title><enclosure url="https://jdheyburn.co.uk/blog/who-goes-blogging-0-applying-cartography/blog-arch-cover.png" type="image/jpg"/><link>https://jdheyburn.co.uk/blog/who-goes-blogging-0-applying-cartography/</link><pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/who-goes-blogging-0-applying-cartography/</guid><description>&amp;lt;h2 id=&amp;#34;applying-cartography&amp;#34;&amp;gt;Applying Cartography&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;With my academic background focused in infrastructure, I love seeing diagrams of topologies - they&amp;amp;rsquo;re a pretty damn useful way of understanding architecture of an application flow amongst other things. Let&amp;amp;rsquo;s take a look at how my portfolio site is architected out.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;As I mentioned in my &amp;lt;a href=&amp;#34;/posts/blog-bootstrap/&amp;#34;&amp;gt;first blog post&amp;lt;/a&amp;gt; - I&amp;amp;rsquo;ve got several ideas on how I can improve on the architecture of this site. But what good is evaluating where you&amp;amp;rsquo;ve come from if you don&amp;amp;rsquo;t document what you currently have?&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;That&amp;amp;rsquo;s when you can make true comparisons in any system. As such the aim of this series of posts will be to explain how this website is architected, so that we may reference it in future posts. Later on, I&amp;amp;rsquo;ll also talk about how you&amp;amp;rsquo;re able to get yourself set up as well.&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;the-setup&amp;#34;&amp;gt;The Setup&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Because we all love an architecture diagram, let&amp;amp;rsquo;s slap one in now.&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;a href=&amp;#34;blog-arch-cover.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-0-applying-cartography/blog-arch-cover.png&amp;#34;
alt=&amp;#34;An architecture diagram of my portfolio site&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;p&amp;gt;Wow. That is&amp;amp;hellip; really not much at all. Apologies if you were expecting a lot more arrows and boxes!&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;In a way, I shouldn&amp;amp;rsquo;t be sorry, because one of the core priniciples in software development is KISS (Keep It Simple Stupid!) - and this setup is just an advantage of how I decided the first implementation of my website to be:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Easy to implement&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Easy to maintain (there is none required!)&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;I&amp;amp;rsquo;m a firm believer that you&amp;amp;rsquo;re best off getting a minimum viable product out there ASAP and then work to perfect it afterward. What I hope to document as time goes on are the various enhancements and changes that I intend on making to the website so that yourselves can follow along too with your own site. That goes not just for this site (how much can it really be improved?!) but for whatever projects I work on.&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;so-what-does-it-all-mean&amp;#34;&amp;gt;So what does it all mean?&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Back to the diagram, let&amp;amp;rsquo;s follow it from right-to-left and start talking about what&amp;amp;rsquo;s going on.&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;github-pages---somewhere-to-call-home&amp;#34;&amp;gt;GitHub Pages - somewhere to call home&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;You can see that the site is hosted on GitHub Pages. Essentially this is GitHub&amp;amp;rsquo;s platform for hosting the static resources that are checked into the public repos. This then presents the assets at a domain prefix of your choosing, suffixed by &amp;lt;code&amp;gt;.github.io&amp;lt;/code&amp;gt; - in my case it is at &amp;lt;code&amp;gt;jdheyburn.github.io&amp;lt;/code&amp;gt;. GitHub Pages only hosts your site via HTTPS so you know your pages aren&amp;amp;rsquo;t being subject to a man-in-the-middle attack, and it takes care of your TLS certificates so you don&amp;amp;rsquo;t need to worry about renewing them!&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;You might be wondering why you would need to serve a static site over HTTPS when you aren&amp;amp;rsquo;t handling anything confidential. I&amp;amp;rsquo;ll turn you to Troy Hunt&amp;amp;rsquo;s excellent article &amp;lt;a href=&amp;#34;https://www.troyhunt.com/heres-why-your-static-website-needs-https/&amp;#34;&amp;gt;Here&amp;amp;rsquo;s Why Your Static Website Needs HTTPS&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;h3 id=&amp;#34;supercharge-your-delivery&amp;#34;&amp;gt;Supercharge your delivery!&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Now that the website is hosted at GitHub - I stuck a content delivery network (CDN) in front of GitHub for a whole load of reasons, some of which are:&amp;lt;/p&amp;gt;
&amp;lt;h4 id=&amp;#34;fast-end-user-response-times&amp;#34;&amp;gt;Fast end-user response times&amp;lt;/h4&amp;gt;
&amp;lt;p&amp;gt;CDNs cache your content at edge locations dotted all over the globe, where the client is then served content from the one closest geographically (let me direct you to &amp;lt;a href=&amp;#34;https://people.eecs.berkeley.edu/~rcs/research/interactive_latency.html&amp;#34;&amp;gt;latency numbers every programmer should know&amp;lt;/a&amp;gt;).&amp;lt;/p&amp;gt;
&amp;lt;h4 id=&amp;#34;security&amp;#34;&amp;gt;Security&amp;lt;/h4&amp;gt;
&amp;lt;p&amp;gt;The CDN acts as a proxy between the client and your servers - their requests don&amp;amp;rsquo;t actually hit you directly.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Not only that, a lot of CDNs provide DDoS protection to ensure excessive requests don&amp;amp;rsquo;t bring down your servers.&amp;lt;/p&amp;gt;
&amp;lt;h4 id=&amp;#34;analytics&amp;#34;&amp;gt;Analytics&amp;lt;/h4&amp;gt;
&amp;lt;p&amp;gt;Because everyone loves graphs and numbers&amp;amp;hellip; right??&amp;amp;hellip; Alright just me then&amp;amp;hellip;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;You&amp;amp;rsquo;ll be able to see how many requests are being served up, where requests originate from, amongst others. Take a look at an example below.&amp;lt;/p&amp;gt;
&amp;lt;figure&amp;gt;&amp;lt;a href=&amp;#34;analytics_example.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/who-goes-blogging-0-applying-cartography/analytics_example.png&amp;#34;
alt=&amp;#34;A graph displaying total requests, and how many of them were cached&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;h4 id=&amp;#34;custom-domain&amp;#34;&amp;gt;Custom domain&amp;lt;/h4&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;This means you can access your site on something other than &amp;lt;code&amp;gt;&amp;amp;lt;my_site&amp;amp;gt;.github.io&amp;lt;/code&amp;gt;, which is great for when you move off GitHub Pages to another platform, you can just tell Cloudflare to source requests from another server&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;It also gives your site that extra polish and professionalism about it - wouldn&amp;amp;rsquo;t you agree?&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;My CDN of choice is &amp;lt;a href=&amp;#34;https://www.cloudflare.com/&amp;#34;&amp;gt;Cloudflare&amp;lt;/a&amp;gt;, for no reason more than is it completely free to use and will most likely stay free until I decide I would benefit from the next &amp;lt;a href=&amp;#34;https://www.cloudflare.com/en-gb/plans/&amp;#34;&amp;gt;pricing step&amp;lt;/a&amp;gt;. Did I mention the website is pretty damn easy to use as well?&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;That means that the operating cost of a site like this is exactly ZILCH (nada, et al.), which again is another great reason to get set up on a platform like this.&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;top-level-domain-fatigue&amp;#34;&amp;gt;Top-level domain fatigue?&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;I&amp;amp;rsquo;m from the UK - and I wanted my site to reflect that, so I purchased a domain with the top-level domain (TLD) &amp;lt;code&amp;gt;.co.uk&amp;lt;/code&amp;gt;. However when users come to visit me on my site they may not always remember whether it was &amp;lt;code&amp;gt;.com&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;.dev&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;.tk&amp;lt;/code&amp;gt; (remember those?). Therefore I also have &amp;lt;code&amp;gt;jdheyburn.com&amp;lt;/code&amp;gt; set up in the same way as its &amp;lt;code&amp;gt;.co.uk&amp;lt;/code&amp;gt; sibling to maximise that user experience.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Okay well that means there is a slight cost to maintain the site through purchasing and renewing the custom domains (notice how jdheyburn.com redirects to jdheyburn.co.uk?) but we&amp;amp;rsquo;re talking in the £10s per year for these two.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;So if you&amp;amp;rsquo;re interested in having a setup like this, then over the next few posts I&amp;amp;rsquo;ll be detailing how you can do the same.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;- jdheyburn&amp;lt;/p&amp;gt;</description></item></channel></rss>