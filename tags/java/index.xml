<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on JDHeyburn</title><link>https://jdheyburn.co.uk/tags/java/</link><description>Recent content in java on JDHeyburn</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 29 Apr 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://jdheyburn.co.uk/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Extending Gotests for Strict Error Tests</title><enclosure url="https://jdheyburn.co.uk/images/jdheyburn_co_uk_card.png" type="image/jpg"/><link>https://jdheyburn.co.uk/blog/extending-gotests-for-strict-error-tests/</link><pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/extending-gotests-for-strict-error-tests/</guid><description>&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;UPDATE 2020-07-17&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I wrote a follow up post to this one using the &amp;lt;a href=&amp;#34;https://godoc.org/github.com/stretchr/testify/assert&amp;#34;&amp;gt;assert&amp;lt;/a&amp;gt; package instead.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Awesome - &amp;lt;a href=&amp;#34;/blog/assertions-in-gotests-test-generation/&amp;#34;&amp;gt;take me there&amp;lt;/a&amp;gt;!&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;h2 id=&amp;#34;strict-error-tests-in-java&amp;#34;&amp;gt;Strict Error Tests in Java&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;I love confirming the stability of my code through writing tests and practicing Test-driven development (TDD). For Java, JUnit was my preferred testing framework of choice. When writing tests to confirm an exception had been thrown, I used the optional parameter &amp;lt;code&amp;gt;expected&amp;lt;/code&amp;gt; for the annotation &amp;lt;code&amp;gt;@Test&amp;lt;/code&amp;gt;, however I quickly found that this solution would not work for methods where I raised the same exception class multiple times for different error messages, and testing on those messages.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This is commonly found in writing a validation method such as the one below, which will take in a name of a dog and return a boolean if it is valid.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-java&amp;#34; data-lang=&amp;#34;java&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;static&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#8be9fd&amp;#34;&amp;gt;boolean&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;validateDogName&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;(&amp;lt;/span&amp;gt;String dogName&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;)&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;throws&amp;lt;/span&amp;gt; DogValidationException &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;{&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;(&amp;lt;/span&amp;gt;containsSymbols&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;(&amp;lt;/span&amp;gt;dogName&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;))&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;{&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;throw&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;new&amp;lt;/span&amp;gt; DogValidationException&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;Dogs cannot have symbols in their name!&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;);&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;}&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;(&amp;lt;/span&amp;gt;dogName&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;length&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;&amp;amp;gt;&amp;lt;/span&amp;gt; 100&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;)&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;{&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;throw&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;new&amp;lt;/span&amp;gt; DogValidationException&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;Who has a name for a dog that long?!&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;);&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;}&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;;&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;}&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;For this method, just using &amp;lt;code&amp;gt;@Test(expected = DogValidationException.class)&amp;lt;/code&amp;gt; on our test method is not sufficient; how can we determine that the exception was raised for a dogName.length breach and not for containing symbols?&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;In order for me to resolve this, I came across the &amp;lt;code&amp;gt;ExpectedException&amp;lt;/code&amp;gt; class for JUnit on &amp;lt;a href=&amp;#34;https://www.baeldung.com/junit-assert-exception&amp;#34;&amp;gt;Baeldung&amp;lt;/a&amp;gt; which enables us to specify the error message expected. Here it is applied to the test case for this method:&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-java&amp;#34; data-lang=&amp;#34;java&amp;#34;&amp;gt;@Rule
&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;public&amp;lt;/span&amp;gt; ExpectedException exceptionRule &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt; ExpectedException&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;none&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;();&amp;lt;/span&amp;gt;
@Test
&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;public&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#8be9fd&amp;#34;&amp;gt;void&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;shouldHandleDogNameWithSymbols&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;()&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;{&amp;lt;/span&amp;gt;
exceptionRule&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;expect&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;(&amp;lt;/span&amp;gt;DogValidationException&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;class&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;);&amp;lt;/span&amp;gt;
exceptionRule&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;.&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;expectMessage&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;Dogs cannot have symbols in their name!&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;);&amp;lt;/span&amp;gt;
validateDogName&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;GoodestBoy#1&amp;amp;#34;&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;);&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;}&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;applying-to-golang&amp;#34;&amp;gt;Applying to Golang&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Back to Golang, there is a built-in library aptly named &amp;lt;code&amp;gt;testing&amp;lt;/code&amp;gt; which enables us to assert on test conditions. When combined with &amp;lt;a href=&amp;#34;https://github.com/cweill/gotests&amp;#34;&amp;gt;Gotests&amp;lt;/a&amp;gt; - a tool for generating Go tests from your code - writing tests could not be easier! I love how this is bundled in with the Go extension for VSCode, my text editor of choice (for now&amp;amp;hellip;).&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Converting the above Java &amp;lt;code&amp;gt;validateDogName&amp;lt;/code&amp;gt; method to Golang will produce something like:&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-golang&amp;#34; data-lang=&amp;#34;golang&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;validateDogName&amp;lt;/span&amp;gt;(name &amp;lt;span style=&amp;#34;color:#8be9fd&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;) (&amp;lt;span style=&amp;#34;color:#8be9fd&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#8be9fd&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;) {
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;containsSymbols&amp;lt;/span&amp;gt;(name) {
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt;, errors.&amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;dog cannot have symbols in their name&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;len&amp;lt;/span&amp;gt;(name) &amp;amp;gt; &amp;lt;span style=&amp;#34;color:#bd93f9&amp;#34;&amp;gt;100&amp;lt;/span&amp;gt; {
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt;, errors.&amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;who has a name for a dog that long&amp;amp;#34;&amp;lt;/span&amp;gt;)
}
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;, &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;If you have a Go method that returns the &amp;lt;code&amp;gt;error&amp;lt;/code&amp;gt; interface, then gotests will generate a test that look like this:&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-golang&amp;#34; data-lang=&amp;#34;golang&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;Test_validateDogName&amp;lt;/span&amp;gt;(t &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;testing.T) {
&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; args &amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
name &amp;lt;span style=&amp;#34;color:#8be9fd&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
}
tests &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
name &amp;lt;span style=&amp;#34;color:#8be9fd&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
args args
want &amp;lt;span style=&amp;#34;color:#8be9fd&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
wantErr &amp;lt;span style=&amp;#34;color:#8be9fd&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
}{
name: &amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;Test error was thrown for dog name with symbols&amp;amp;#34;&amp;lt;/span&amp;gt;,
args: args{
name: &amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;GoodestBoy#1&amp;amp;#34;&amp;lt;/span&amp;gt;,
},
want: &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt;,
wantErr: &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;,
}
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; _, tt &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; tests {
t.&amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;Run&amp;lt;/span&amp;gt;(tt.name, &amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(t &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;testing.T) {
got, err &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;validateDogName&amp;lt;/span&amp;gt;(tt.args.name)
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; (err &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt;) &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; tt.wantErr {
t.&amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;Errorf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;validateDogName() error = %v, wantErr %v&amp;amp;#34;&amp;lt;/span&amp;gt;, err, tt.wantErr)
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; got &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; tt.want {
t.&amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;Errorf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;validateDogName() = %v, want %v&amp;amp;#34;&amp;lt;/span&amp;gt;, got, tt.want)
}
})
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;From the above we are limited to what error we can assert for, here &amp;lt;em&amp;gt;any&amp;lt;/em&amp;gt; error returned will pass the test. This is equivalent to using &amp;lt;code&amp;gt;@Test(expected=Exception.class)&amp;lt;/code&amp;gt; in JUnit! But there is another way&amp;amp;hellip;&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;modifying-the-generated-test&amp;#34;&amp;gt;Modifying the Generated Test&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;We only need to make a few simple changes to the generated test to give us the ability to assert on test error message&amp;amp;hellip;&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-go&amp;#34; data-lang=&amp;#34;go&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;Test_validateDogName&amp;lt;/span&amp;gt;(t &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;testing.T) {
&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;type&amp;lt;/span&amp;gt; args &amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
name &amp;lt;span style=&amp;#34;color:#8be9fd&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
}
tests &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; []&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;struct&amp;lt;/span&amp;gt; {
name &amp;lt;span style=&amp;#34;color:#8be9fd&amp;#34;&amp;gt;string&amp;lt;/span&amp;gt;
args args
want &amp;lt;span style=&amp;#34;color:#8be9fd&amp;#34;&amp;gt;bool&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;display:block;width:100%;background-color:#3d3f4a&amp;#34;&amp;gt; wantErr &amp;lt;span style=&amp;#34;color:#8be9fd&amp;#34;&amp;gt;error&amp;lt;/span&amp;gt;
&amp;lt;/span&amp;gt; }{
name: &amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;Test error was thrown for dog name with symbols&amp;amp;#34;&amp;lt;/span&amp;gt;,
args: args{
name: &amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;GoodestBoy#1&amp;amp;#34;&amp;lt;/span&amp;gt;,
},
want: &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;false&amp;lt;/span&amp;gt;,
&amp;lt;span style=&amp;#34;display:block;width:100%;background-color:#3d3f4a&amp;#34;&amp;gt; wantErr: errors.&amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;New&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;dog cannot have symbols in their name&amp;amp;#34;&amp;lt;/span&amp;gt;),
&amp;lt;/span&amp;gt; }
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;for&amp;lt;/span&amp;gt; _, tt &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;range&amp;lt;/span&amp;gt; tests {
t.&amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;Run&amp;lt;/span&amp;gt;(tt.name, &amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;func&amp;lt;/span&amp;gt;(t &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;*&amp;lt;/span&amp;gt;testing.T) {
got, err &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;:=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;validateDogName&amp;lt;/span&amp;gt;(tt.args.name)
&amp;lt;span style=&amp;#34;display:block;width:100%;background-color:#3d3f4a&amp;#34;&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; tt.wantErr &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;nil&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;&amp;amp;amp;&amp;amp;amp;&amp;lt;/span&amp;gt; !reflect.&amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;DeepEqual&amp;lt;/span&amp;gt;(err, tt.wantErr) {
&amp;lt;/span&amp;gt; t.&amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;Errorf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;validateDogName() error = %v, wantErr %v&amp;amp;#34;&amp;lt;/span&amp;gt;, err, tt.wantErr)
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;return&amp;lt;/span&amp;gt;
}
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;if&amp;lt;/span&amp;gt; got &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;!=&amp;lt;/span&amp;gt; tt.want {
t.&amp;lt;span style=&amp;#34;color:#50fa7b&amp;#34;&amp;gt;Errorf&amp;lt;/span&amp;gt;(&amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;validateDogName() = %v, want %v&amp;amp;#34;&amp;lt;/span&amp;gt;, got, tt.want)
}
})
}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;From the above there are three highlighted changes, let&amp;amp;rsquo;s go over them individually:&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;wantErr error&amp;lt;/code&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;we are changing this from &amp;lt;code&amp;gt;bool&amp;lt;/code&amp;gt; so that we can make a comparison against the error returned from the function&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;wantErr: errors.New(&amp;amp;quot;dog cannot have symbols in their name&amp;amp;quot;),&amp;lt;/code&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;this is the error struct that we are expecting&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;if tt.wantErr != nil &amp;amp;amp;&amp;amp;amp; !reflect.DeepEqual(err, tt.wantErr) {&amp;lt;/code&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;check to make sure the test is expected an error, if so then compare it against the returned error&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;p&amp;gt;Point 3 provides additional support if there was a test case that did not expect an error. Note how &amp;lt;code&amp;gt;wantErr&amp;lt;/code&amp;gt; is omitted entirely from the test case below.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-golang&amp;#34; data-lang=&amp;#34;golang&amp;#34;&amp;gt;{
name: &amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;Should return true for valid dog name&amp;amp;#34;&amp;lt;/span&amp;gt;,
args: args{
name: &amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;Benedict Cumberland the Sausage Dog&amp;amp;#34;&amp;lt;/span&amp;gt;,
},
want: &amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;true&amp;lt;/span&amp;gt;,
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h3 id=&amp;#34;customising-gotests-generated-test&amp;#34;&amp;gt;Customising Gotests Generated Test&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Gotests gives us the ability to provide our own templates for generating tests, and can easily be integrated into your text editor of choice. I&amp;amp;rsquo;ll show you how this can be done in VSCode.&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Check out gotests and copy the templates directory to a place of your choosing
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;git clone https://github.com/cweill/gotests.git&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;cp -R gotests/internal/render/templates ~/scratch/gotests&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Overwrite the contents of function.tmpl with &amp;lt;a href=&amp;#34;https://gist.github.com/jdheyburn/978e7b84dc9c197bcdd41afece2edab5&amp;#34;&amp;gt;the contents of this Gist&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Add the following setting to VSCode&amp;amp;rsquo;s settings.json
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;&amp;amp;quot;go.generateTestsFlags&amp;amp;quot;: [&amp;amp;quot;--template_dir=~/scratch/templates&amp;amp;quot;]&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;p&amp;gt;Once you have done that, future tests will now generate with stricter error testing! 🎉&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;closing&amp;#34;&amp;gt;Closing&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;I understand that the recommendations above will make your code more fragile, as the code is subject to any changing of the error message of say a downstream library. However for myself, I prefer to write tests that are strict and minimalise the chance of other errors contaminating tests.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I also understand that GoodestBoy#1 is probably a valid name for a dog! 🐶&amp;lt;/p&amp;gt;</description></item></channel></rss>