<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>certificates on JDHeyburn</title><link>https://jdheyburn.co.uk/tags/certificates/</link><description>Recent content in certificates on JDHeyburn</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 09 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://jdheyburn.co.uk/tags/certificates/index.xml" rel="self" type="application/rss+xml"/><item><title>Reverse Proxy Multiple Domains Using Caddy 2</title><enclosure url="https://jdheyburn.co.uk/blog/reverse-proxy-multiple-domains-using-caddy-2/cover.png" type="image/jpg"/><link>https://jdheyburn.co.uk/blog/reverse-proxy-multiple-domains-using-caddy-2/</link><pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/reverse-proxy-multiple-domains-using-caddy-2/</guid><description>&amp;lt;p&amp;gt;During lockdown, I&amp;amp;rsquo;ve spent a bit of time improving our home network. The bigger picture of which I&amp;amp;rsquo;ll write about in a future post. But for now, I came across some challenges with running &amp;lt;a href=&amp;#34;https://caddyserver.com/&amp;#34;&amp;gt;Caddy 2&amp;lt;/a&amp;gt; as a reverse proxy for multiple domains used internally.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;If you&amp;amp;rsquo;ve stumbled across this looking for the end config file for Caddy, then you can &amp;lt;a href=&amp;#34;https://jdheyburn.co.uk/blog/reverse-proxy-multiple-domains-using-caddy-2/#caddy-configuration&amp;#34;&amp;gt;skip there&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;background&amp;#34;&amp;gt;Background&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;A few months back I kitted out my home with some &amp;lt;a href=&amp;#34;https://www.ui.com/products/#unifi&amp;#34;&amp;gt;Ubiquiti UniFi&amp;lt;/a&amp;gt; gear to fix our crappy Wifi at home, following inspiration from &amp;lt;a href=&amp;#34;https://www.troyhunt.com/ubiquiti-all-the-things-how-i-finally-fixed-my-dodgy-wifi/&amp;#34;&amp;gt;Troy Hunt&amp;lt;/a&amp;gt; and &amp;lt;a href=&amp;#34;https://scotthelme.co.uk/my-ubiquiti-home-network/&amp;#34;&amp;gt;Scott Helme&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;In order to administrate UniFi devices, you&amp;amp;rsquo;ll need the &amp;lt;a href=&amp;#34;https://www.ui.com/unifi/unifi-cloud-key/&amp;#34;&amp;gt;UniFi Cloud Key&amp;lt;/a&amp;gt; which runs the Controller software to do just that. Although if you have a spare Raspberry Pi lying around, you can download the &amp;lt;a href=&amp;#34;https://www.ui.com/download/unifi/&amp;#34;&amp;gt;software&amp;lt;/a&amp;gt; for free and run it on there - this is what I did.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I&amp;amp;rsquo;ve also wanted to protect my home network with a self-hosted DNS server, such as &amp;lt;a href=&amp;#34;https://pi-hole.net/&amp;#34;&amp;gt;PiHole&amp;lt;/a&amp;gt;. I won&amp;amp;rsquo;t go into depth about how that was done, but you can follow &amp;lt;a href=&amp;#34;https://scotthelme.co.uk/securing-dns-across-all-of-my-devices-with-pihole-dns-over-https-1-1-1-1/&amp;#34;&amp;gt;Scott Helme&amp;amp;rsquo;s guide&amp;lt;/a&amp;gt; on how you can set the same up.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Both of these services can be accessed through web browsers at the IP address and ports where they are being hosted, such as &amp;lt;code&amp;gt;http://192.168.1.10:8093/admin/&amp;lt;/code&amp;gt; in the case of PiHole. Having to remember the IP address and the port can be a pain. We can front these services with a rememberable domain name which points to these services - of which I&amp;amp;rsquo;ve written about in a &amp;lt;a href=&amp;#34;/blog/who-goes-blogging-2-custom-domain/&amp;#34;&amp;gt;previous post&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;h3 id=&amp;#34;securing-with-https&amp;#34;&amp;gt;Securing with HTTPS&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;The web is evolving, and there is no reason why we should access services via insecure HTTP, that includes services that are only running on an internal network such as a home network. Web browsers nowadays give you a warning when you are connecting to website over an unencrypted connection.&amp;lt;/p&amp;gt;
&amp;lt;figure class=&amp;#34;center&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;insecure-pihole.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/reverse-proxy-multiple-domains-using-caddy-2/insecure-pihole.png&amp;#34;
alt=&amp;#34;Insecure PiHole connection&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;figcaption&amp;gt;
&amp;lt;p&amp;gt;Simply accessing over HTTP is not an option, when browsers present us with a huge warning message&amp;lt;/p&amp;gt;
&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://caddyserver.com/&amp;#34;&amp;gt;Caddy&amp;lt;/a&amp;gt; is a web server similar to Apache, nginx, et al., but it is different in that it enables HTTPS by default and upgrades requests from HTTP to HTTPS. Managing certificates for HTTPS is a pain - so Caddy does that too, so long as you can prove you own the domain you are hosting requests at. We can use Caddy in a reverse proxy mode, allowing us to access services at endpoints such as &amp;lt;code&amp;gt;https://pihole.domain.local&amp;lt;/code&amp;gt; in our browsers and forward them to the corresponding IP address hosting the service.&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;A &amp;lt;a href=&amp;#34;https://www.cloudflare.com/learning/cdn/glossary/reverse-proxy/&amp;#34;&amp;gt;reverse proxy&amp;lt;/a&amp;gt; is a service that simply forwards client requests onto the server on the clients behalf.&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;h2 id=&amp;#34;proving-domain-ownership&amp;#34;&amp;gt;Proving Domain Ownership&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Caddy uses &amp;lt;a href=&amp;#34;https://letsencrypt.org/&amp;#34;&amp;gt;Let&amp;amp;rsquo;s Encrypt&amp;lt;/a&amp;gt; (LE) to provide certificates for domains. Since domains can be exposed publicly, we will have to prove ownership of the domain to have LE issue certificates on our behalf - so we&amp;amp;rsquo;ll have to purchase the domain from a registrar. I talked about how to do this for this website &amp;lt;a href=&amp;#34;/blog/who-goes-blogging-2-custom-domain/#acquire-a-domain&amp;#34;&amp;gt;in the past&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;LE supports several &amp;lt;a href=&amp;#34;https://letsencrypt.org/docs/challenge-types/&amp;#34;&amp;gt;challenge methods&amp;lt;/a&amp;gt; in order to prove you own the domain. This helps mitigates attacks by adversaries by claiming they own a domain such as &amp;lt;code&amp;gt;natwest.co.uk&amp;lt;/code&amp;gt; - allowing them to create phishing attacks and steal banking information.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Since my network is only visible internally for the moment (i.e. the domain will only resolve to an IP address on my network) - I cannot use HTTP or TLS since these require the domain to resolve to a public IP address to a web server hosting a challenge file requested by LE. Therefore the only option I have is DNS challenge, where a randomly string generated by LE is placed into the &amp;lt;a href=&amp;#34;https://www.cloudflare.com/learning/dns/dns-records/dns-txt-record/&amp;#34;&amp;gt;TXT record&amp;lt;/a&amp;gt; of a DNS record to confirm ownership.&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;building-our-caddy&amp;#34;&amp;gt;Building Our Caddy&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;For this exercise I&amp;amp;rsquo;ll be using the latest version, Caddy 2, which allows for plugins to be built into the binary depending on your use case - including &amp;lt;a href=&amp;#34;https://caddyserver.com/docs/automatic-https#dns-challenge&amp;#34;&amp;gt;DNS challenge&amp;lt;/a&amp;gt;. This plugin isn&amp;amp;rsquo;t included by default, so we&amp;amp;rsquo;ll need to build our own Caddy binary. The tool to do this is called &amp;lt;a href=&amp;#34;https://github.com/caddyserver/xcaddy&amp;#34;&amp;gt;xcaddy&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;UPDATE 2020-09-30&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Looks like Caddy now comes with a &amp;lt;a href=&amp;#34;https://caddyserver.com/download&amp;#34;&amp;gt;nice web interface&amp;lt;/a&amp;gt; for downloading a Caddy binary with whatever plugins you desire. I just tested out the &amp;lt;code&amp;gt;Linux arm 7&amp;lt;/code&amp;gt; platform with just the &amp;lt;code&amp;gt;github.com/caddy-dns/cloudflare&amp;lt;/code&amp;gt; plugin, and it was able to run my Caddy configuration below perfectly!&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Once you&amp;amp;rsquo;ve got the binary downloaded, copy it to the Pi then skip to &amp;lt;a href=&amp;#34;https://jdheyburn.co.uk/blog/reverse-proxy-multiple-domains-using-caddy-2/#caddy-configuration&amp;#34;&amp;gt;Caddy Configuration&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;To build using xcaddy, you need to make sure you have &amp;lt;a href=&amp;#34;https://golang.org/doc/install&amp;#34;&amp;gt;Go installed&amp;lt;/a&amp;gt; on your machine.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Note that I am building Caddy on my laptop, but running it on a Pi, so I will have to specify the architecture that Pi is running on so that Go can correctly build it.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#6272a4&amp;#34;&amp;gt;# Download xcaddy&amp;lt;/span&amp;gt;
go get -u github.com/caddyserver/xcaddy/cmd/xcaddy
&amp;lt;span style=&amp;#34;color:#6272a4&amp;#34;&amp;gt;# Build custom Caddy binary for Raspberry Pi&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;GOOS&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;linux &amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;GOARCH&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;arm &amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;GOARM&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#bd93f9&amp;#34;&amp;gt;7&amp;lt;/span&amp;gt; xcaddy build --with github.com/caddy-dns/cloudflare
&amp;lt;span style=&amp;#34;color:#6272a4&amp;#34;&amp;gt;# Copy the new binary across to the Pi&amp;lt;/span&amp;gt;
scp caddy pi:/home/pi/caddy/
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;caddy-configuration&amp;#34;&amp;gt;Caddy Configuration&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;The configuration I&amp;amp;rsquo;m using can be seen below. Some things to note:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;I&amp;amp;rsquo;m using Cloudflare as the DNS name servers for the domain, even though I purchased my domain from namecheap
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;This repeats an &amp;lt;a href=&amp;#34;/blog/who-goes-blogging-2-custom-domain/#adding-our-cdn-layer&amp;#34;&amp;gt;exercise I&amp;amp;rsquo;ve done previously&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;I&amp;amp;rsquo;ve done this for two reasons:
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Caddy at the time of writing does not have a namecheap DNS challenge plugin&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;It&amp;amp;rsquo;s a proven method I know already&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;A &amp;lt;code&amp;gt;CLOUDFLARE_API_TOKEN&amp;lt;/code&amp;gt; is required to have Caddy set the TXT record DNS challenge received from LE
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;https://support.cloudflare.com/hc/en-us/articles/200167836-Managing-API-Tokens-and-Keys&amp;#34;&amp;gt;Guide for the same&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Caddy is reverse proxying traffic to services running locally on the Pi&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Caddy is not verifying the certificate being hosted by the UniFi Controller (&amp;lt;code&amp;gt;insecure_skip_verify = true&amp;lt;/code&amp;gt;)
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;The controller self-signs a certificate, and the reverse proxy has no means of establishing a chain of trust to verify the certificate&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;It&amp;amp;rsquo;s not a best practice to not verify the chain of trust, however I&amp;amp;rsquo;m happy to accept the risk for now&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://caddyserver.com/docs/json/&amp;#34;&amp;gt;Click here&amp;lt;/a&amp;gt; to see documentation on Caddy JSON config files.&amp;lt;/p&amp;gt;
&amp;lt;script type=&amp;#34;application/javascript&amp;#34; src=&amp;#34;https://gist.github.com/jdheyburn/ca668a9d162535ab92db2cfa6f4e4e54.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;h2 id=&amp;#34;updating-dns-records&amp;#34;&amp;gt;Updating DNS Records&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Remember that the domain names aren&amp;amp;rsquo;t actually publicly accessible. At a basic level we can update the &amp;lt;code&amp;gt;/etc/hosts&amp;lt;/code&amp;gt; file of the machine we&amp;amp;rsquo;re running on to add a record telling our machine how to resolve the domain.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;sudo sh -c &amp;lt;span style=&amp;#34;color:#f1fa8c&amp;#34;&amp;gt;&amp;amp;#34;echo \&amp;amp;#34;192.168.1.10 pihole.joannet.casa\n192.168.1.10 unifi.joannet.casa\&amp;amp;#34; &amp;amp;gt;&amp;amp;gt; /etc/hosts&amp;amp;#34;&amp;lt;/span&amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;However, we&amp;amp;rsquo;re already using PiHole as our own DNS server right? We can add the records there instead.&amp;lt;/p&amp;gt;
&amp;lt;figure class=&amp;#34;center&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;pihole-dns-records.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/reverse-proxy-multiple-domains-using-caddy-2/pihole-dns-records.png&amp;#34;
alt=&amp;#34;Adding domain records to DNS server&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;figcaption&amp;gt;
&amp;lt;p&amp;gt;PiHole let&amp;amp;rsquo;s you specify where local domain names should resolve to&amp;lt;/p&amp;gt;
&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;p&amp;gt;The IP addresses you see above are pointing to the host running Caddy, the Raspberry Pi.&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;#34;verifying-caddy&amp;#34;&amp;gt;Verifying Caddy&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Once the config file is built, you can perform a test run to confirm everything is working by executing this command.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;sudo ./caddy run --config config.json
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;We need to execute using &amp;lt;code&amp;gt;sudo&amp;lt;/code&amp;gt; so that we can expose the service to restricted ports 80 and 443 (HTTP and HTTPS respectively).&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;figure class=&amp;#34;center&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;proxied-pihole.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/reverse-proxy-multiple-domains-using-caddy-2/proxied-pihole.png&amp;#34;
alt=&amp;#34;PiHole appearing in browser through a domain name&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;figure class=&amp;#34;center&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;proxied-unifi.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/reverse-proxy-multiple-domains-using-caddy-2/proxied-unifi.png&amp;#34;
alt=&amp;#34;UniFi Controller appearing in browser through a domain name&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;p&amp;gt;Now we have a memorable domain name fronting the service, and Firefox is happy that we&amp;amp;rsquo;re encrypting the connection too. The certificate being produced in seen below.&amp;lt;/p&amp;gt;
&amp;lt;figure class=&amp;#34;center&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;pihole-certificate.png&amp;#34;&amp;gt;
&amp;lt;img src=&amp;#34;https://jdheyburn.co.uk/blog/reverse-proxy-multiple-domains-using-caddy-2/pihole-certificate.png&amp;#34;
alt=&amp;#34;Certificate used by PiHole&amp;#34;/&amp;gt; &amp;lt;/a&amp;gt;
&amp;lt;/figure&amp;gt;
&amp;lt;h2 id=&amp;#34;enabling-caddy-service&amp;#34;&amp;gt;Enabling Caddy Service&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Since we&amp;amp;rsquo;re not using the standard Caddy installation method, we will need to specify a service unit file so that Caddy starts up at the same time as the host - which is what PiHole and UniFi are doing currently.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;First check to see if there is a stale service there already.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;$ ls -la /etc/systemd/system/caddy.service
lrwxrwxrwx &amp;lt;span style=&amp;#34;color:#bd93f9&amp;#34;&amp;gt;1&amp;lt;/span&amp;gt; root root &amp;lt;span style=&amp;#34;color:#bd93f9&amp;#34;&amp;gt;9&amp;lt;/span&amp;gt; Jun &amp;lt;span style=&amp;#34;color:#bd93f9&amp;#34;&amp;gt;4&amp;lt;/span&amp;gt; 09:14 /etc/systemd/system/caddy.service -&amp;amp;gt; /dev/null
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;If you get the above then remove the symlink so that we can create a file there.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;rm /etc/systemd/system/caddy.service
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Then populate the same file with the below, remembering the change the location of the Caddy config file to where it exists on your machine.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;[&amp;lt;/span&amp;gt;Unit&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;]&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;Description&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;Caddy Reverse Proxy
&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;Wants&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;network-online.target
&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;After&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;network.target network-online.target
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;[&amp;lt;/span&amp;gt;Service&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;]&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;ExecStart&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;/usr/local/bin/caddy run --config /home/jdheyburn/homelab/caddy/config.json
&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;Restart&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;on-abort
&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;[&amp;lt;/span&amp;gt;Install&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;]&amp;lt;/span&amp;gt;
&amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;WantedBy&amp;lt;/span&amp;gt;&amp;lt;span style=&amp;#34;color:#ff79c6&amp;#34;&amp;gt;=&amp;lt;/span&amp;gt;multi-user.target
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;p&amp;gt;Finalise the new service with the two commands, enabling it on host startup and starting the service right now.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;#34;highlight&amp;#34;&amp;gt;&amp;lt;pre style=&amp;#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&amp;#34;&amp;gt;&amp;lt;code class=&amp;#34;language-bash&amp;#34; data-lang=&amp;#34;bash&amp;#34;&amp;gt;sudo systemctl &amp;lt;span style=&amp;#34;color:#8be9fd;font-style:italic&amp;#34;&amp;gt;enable&amp;lt;/span&amp;gt; caddy.service
sudo systemctl start caddy.service
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;h2 id=&amp;#34;conclusion&amp;#34;&amp;gt;Conclusion&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;For now I have all the above running bare-metal on one Pi instance, which produces a huge single point of failure in my network. In the future I&amp;amp;rsquo;d like to see how converting these to Docker containers and having them distributed on multiple Pis would increase the resiliency of these services.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Until then, these basic but essential services are being hosted at easy to remember domains, transported over an encrypted connection, for me to easily administer the network for when it gets more complex over time.&amp;lt;/p&amp;gt;</description></item></channel></rss>