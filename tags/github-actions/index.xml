<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github-actions on JDHeyburn</title>
    <link>https://jdheyburn.co.uk/tags/github-actions/</link>
    <description>Recent content in github-actions on JDHeyburn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 10 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jdheyburn.co.uk/tags/github-actions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Who Goes Blogging 3.2: Deployment Methods - GitHub Actions</title><enclosure url="https://jdheyburn.co.uk/blog/who-goes-blogging-3-2-deployment-methods-github-actions/github-actions-build.png" type="image/jpg"></enclosure>
      
      <link>https://jdheyburn.co.uk/blog/who-goes-blogging-3-2-deployment-methods-github-actions/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jdheyburn.co.uk/blog/who-goes-blogging-3-2-deployment-methods-github-actions/</guid>-->
      <description>&lt;h2 id=&#34;from-travisci-to-github-actions&#34;&gt;From TravisCI to GitHub Actions&lt;/h2&gt;
&lt;p&gt;In the &lt;a href=&#34;https://jdheyburn.co.uk/posts/who-goes-blogging-3-1-deployment-methods-travisci/&#34;&gt;previous post&lt;/a&gt; we looked at moving to a CI/CD model by moving from the &lt;code&gt;deploy.sh&lt;/code&gt; script to TravisCI.&lt;/p&gt;
&lt;p&gt;In this post we will look at how we can migrate from TravisCI to &lt;a href=&#34;https://help.github.com/en/actions/getting-started-with-github-actions/about-github-actions&#34;&gt;GitHub Actions&lt;/a&gt;, GitHub&amp;rsquo;s own CI/CD tool.&lt;/p&gt;
&lt;p&gt;This post will also be useful if you are looking to onboard GitHub Actions as your CI/CD pipeline! üöÄ&lt;/p&gt;
&lt;h3 id=&#34;benefits-&#34;&gt;Benefits ‚úÖ&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s talk about why we want to migrate away from TravisCI in the first place.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Firstly and most importantly&lt;/strong&gt;, there is a whole community of shared actions (a set of build instructions) which can save you a &lt;em&gt;huge&lt;/em&gt; amount of time when it comes to piecing together a CI pipeline. If the TravisCI config seemed a bit intimidating, then these will be a whole lot more gentler to you.&lt;/p&gt;
&lt;p&gt;Whereas in our Travis config we had to define the individual commands needed to set up our environment and then how to build it, there&amp;rsquo;s an &lt;a href=&#34;https://github.com/marketplace/actions/hugo-setup&#34;&gt;action&lt;/a&gt; for that! Want to include some markdown linting? There&amp;rsquo;s an &lt;a href=&#34;https://github.com/marketplace/actions/markdownlint-cli&#34;&gt;action&lt;/a&gt; for that!&lt;/p&gt;
&lt;p&gt;I think you folks get the picture now. There&amp;rsquo;s an &lt;a href=&#34;https://github.com/sdras/awesome-actions&#34;&gt;awesome-actions&lt;/a&gt; repository worth checking out for more actions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Secondly&lt;/strong&gt;, all your DevOps tools are in one place! I&amp;rsquo;m a big sucker for &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt; and while I don&amp;rsquo;t use it for my personal projects, I&amp;rsquo;ve used it in a past life and found its seamless integration with all other tools second-to-none. Not having to worry about integrating between multiple services can only increase your productivity - allowing you to focus more on the application you&amp;rsquo;re writing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lastly&lt;/strong&gt;, all configuration is managed in the workflow configuration file. One enhancement in particular that we will be introducing can be achieved with an additional setting in the workflow config file; for us to achieve the same in Travis would have to be done via the GUI. I&amp;rsquo;m a big sucker for having configuration baked into code so this is a very good plus.&lt;/p&gt;
&lt;h3 id=&#34;pricing-&#34;&gt;Pricing ‚è∞&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;However&lt;/strong&gt; - one downsides to GitHub Actions is how many build minutes you get. Remember Travis allowed unlimited build minutes for a public repository? With Actions - you are limited to &lt;a href=&#34;https://github.com/pricing&#34;&gt;2,000 minutes in their free plan&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve been building your project in Travis already, you&amp;rsquo;ll notice it has been building (in my case at least) in ~30 seconds. With a bit of maths we can then say we will have 4,000 builds in a month on GitHub Actions.&lt;/p&gt;
&lt;p&gt;Given that this isn&amp;rsquo;t a huge project with multiple contributors working on it, I think it&amp;rsquo;s safe to say we won&amp;rsquo;t ever reach this limit - unless you&amp;rsquo;re churning out blog posts left right and centre!&lt;/p&gt;
&lt;p&gt;Sound good? Let&amp;rsquo;s go.&lt;/p&gt;
&lt;h2 id=&#34;creating-our-workflow&#34;&gt;Creating Our Workflow&lt;/h2&gt;
&lt;p&gt;Like all great services in the world, there is &lt;a href=&#34;https://help.github.com/en/actions&#34;&gt;great documentation&lt;/a&gt; to go along with them. Take a look over there if you&amp;rsquo;d like the detailed version.&lt;/p&gt;
&lt;p&gt;What I will be focusing on is the documentation for two sets of predefined actions; &lt;a href=&#34;https://github.com/peaceiris/actions-hugo&#34;&gt;actions-hugo&lt;/a&gt; for building our website, and &lt;a href=&#34;https://github.com/peaceiris/actions-gh-pages&#34;&gt;actions-gh-pages&lt;/a&gt; for deploying it to GitHub Pages.&lt;/p&gt;
&lt;h3 id=&#34;deployment-keys-setup&#34;&gt;Deployment Keys Setup&lt;/h3&gt;
&lt;p&gt;The very first thing we need to do is set up some keys that will allow our source repository (where the workflow will reside on) to push the built project to the GitHub Pages repo.&lt;/p&gt;
&lt;p&gt;In your terminal, create those keys now and copy the contents of the public key to your clipboard.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ssh-keygen -t rsa -b &lt;span style=&#34;color:#bd93f9&#34;&gt;4096&lt;/span&gt; -C &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;git config user.email&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt; -f ~/.ssh/gh-pages -N &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Generating public/private rsa key pair.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Your identification has been saved in /home/jdheyburn/.ssh/gh-pages.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Your public key has been saved in /home/jdheyburn/.ssh/gh-pages.pub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pbcopy &amp;lt; ~/.ssh/gh-pages.pub
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;macOS has a handy terminal command to copy file contents to the clipboard called &lt;code&gt;pbcopy&lt;/code&gt;. I&amp;rsquo;ve created an alias on my Linux laptop that does the same.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alias pbcopy=&amp;quot;xclip -selection clipboard&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In GitHub load up your GitHub Pages repo and navigate to &lt;code&gt;Settings&lt;/code&gt; and then &lt;code&gt;Deploy keys&lt;/code&gt;. Give it an appropriate name, and paste in the public key. Make sure you check &lt;code&gt;Allow write access&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;gha-deploy-key.png&#34;&gt;&lt;img src=&#34;https://jdheyburn.co.uk/blog/who-goes-blogging-3-2-deployment-methods-github-actions/gha-deploy-key.png&#34;
         alt=&#34;GitHub Pages repo deploy keys page&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;Copy the contents of the &lt;em&gt;private key&lt;/em&gt; you created earlier (perhaps using your new command?! üòè) and navigate to the source code repository&amp;rsquo;s &lt;code&gt;Settings&lt;/code&gt; page, then &lt;code&gt;Secrets&lt;/code&gt;. You&amp;rsquo;ll need to give it a sensible name as this then referred to later in the workflow configuration. Paste the private key in the value field.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;gha-secrets-key.png&#34;&gt;&lt;img src=&#34;https://jdheyburn.co.uk/blog/who-goes-blogging-3-2-deployment-methods-github-actions/gha-secrets-key.png&#34;
         alt=&#34;GitHub source code repo secrets page&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;
            &lt;p&gt;No secrets here!&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;workflow-configuration&#34;&gt;Workflow Configuration&lt;/h3&gt;
&lt;p&gt;In the root directory of your source code repo, create a directory called &lt;code&gt;.github/workflows&lt;/code&gt;. In this directory is where GitHub Actions will look for jobs to do. Create a &lt;code&gt;yml&lt;/code&gt; file in this directory to contain your build job definition. I went ahead and named mine &lt;code&gt;deploy.yml&lt;/code&gt;, but you can name it whatever you like.&lt;/p&gt;
&lt;p&gt;I used the &lt;a href=&#34;https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-repository-type---project&#34;&gt;example&lt;/a&gt; provided in the &lt;code&gt;actions-gh-pages&lt;/code&gt; documentation as a base for my build definition.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/jdheyburn/b4b2cad15604de30f21ad0e1a85ee6b9.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This config is much simpler to understand than the Travis one - let&amp;rsquo;s break it down once more.&lt;/p&gt;
&lt;h4 id=&#34;build-metadata-and-environment&#34;&gt;Build Metadata and Environment&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;name&lt;/span&gt;: Build and deploy to jdheyburn.github.io
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;push&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;branches&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - master
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;schedule&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ff79c6&#34;&gt;cron&lt;/span&gt;:  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0 10 * * *&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;jobs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;deploy&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;runs-on&lt;/span&gt;: ubuntu-18.04
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is pretty box standard at this point. We&amp;rsquo;re simply giving the name to the workflow and saying to run it on every push to the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;An enhancement that we&amp;rsquo;re adding is the &lt;code&gt;on.schedule.cron&lt;/code&gt; setting. This tells Actions not only to build the project on every push to the &lt;code&gt;master&lt;/code&gt; branch but on a timed schedule too - in my example this is at 10am everyday. We could have done the same via Travis, but that can only be &lt;a href=&#34;https://docs.travis-ci.com/user/cron-jobs/&#34;&gt;configured via the GUI&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The benefit to this is the way in which Hugo generates content. Hugo will only build content pages where the date on the content is either today or in the past, and is not a draft.&lt;/p&gt;
&lt;p&gt;Therefore if you had written a post due to be published in the future, you can define that date and have the daily Hugo build publish it when that date has been reached - which is exactly how this blog post was published!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;jobs&lt;/code&gt; is the field that contains the work we want to run. We&amp;rsquo;re giving the job a name of &lt;code&gt;deploy&lt;/code&gt; and telling it to run on &lt;code&gt;ubuntu-18.04&lt;/code&gt; - which is the equivalent to &lt;code&gt;bionic&lt;/code&gt; in Ubuntu.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In order to keep our build the same as Travis&amp;rsquo;s, we could instruct the job to run on &lt;code&gt;ubuntu-16.04&lt;/code&gt;, nonetheless I&amp;rsquo;m pretty confident it will run on the next &lt;a href=&#34;https://wiki.ubuntu.com/Releases&#34;&gt;LTS of Ubuntu&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;project-checkout&#34;&gt;Project Checkout&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ff79c6&#34;&gt;uses&lt;/span&gt;: actions/checkout@v2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ff79c6&#34;&gt;name&lt;/span&gt;: Checkout submodules
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;shell&lt;/span&gt;: bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#f1fa8c&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;      auth_header=&amp;#34;$(git config --local --get http.https://github.com/.extraheader)&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;      git submodule sync --recursive
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;      git -c &amp;#34;http.extraheader=$auth_header&amp;#34; -c protocol.version=2 submodule update --init --force --recursive --depth=1&lt;/span&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we&amp;rsquo;re executing the GitHub &lt;a href=&#34;https://github.com/actions/checkout&#34;&gt;checkout action&lt;/a&gt; which will pull the repo to the build server. It&amp;rsquo;s worth noting that this action version I&amp;rsquo;m using here doesn&amp;rsquo;t checkout git submodules too - which is a problem for us as that&amp;rsquo;s how we&amp;rsquo;re currently pulling the theme for our Hugo site. We can workaround it with the next step in the build - &lt;code&gt;Checkout submodules&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This functionality was available in v1 of the action, so you can use that if you&amp;rsquo;d prefer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ff79c6&#34;&gt;uses&lt;/span&gt;: actions/checkout@v2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;with&lt;/span&gt;: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;submodules&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s worth noting that we didn&amp;rsquo;t have to do this step for Travis - since it will checkout the repository with submodules already.&lt;/p&gt;
&lt;p&gt;This is because GitHub Actions can be used for many more things than just repository code manipulation where you may not necessarily need the repo checked out.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;build-and-deploy-setup&#34;&gt;Build and Deploy Setup&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#ff79c6&#34;&gt;name&lt;/span&gt;: Setup Hugo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;uses&lt;/span&gt;: peaceiris/actions-hugo@v2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;hugo-version&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0.58.3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;extended&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As stated we&amp;rsquo;re going to be using the Action &lt;a href=&#34;https://github.com/peaceiris/actions-hugo&#34;&gt;actions-hugo&lt;/a&gt; to set up &lt;code&gt;hugo&lt;/code&gt; on our build server. It can take in a number of parameters to allow us to customise it; for us we&amp;rsquo;re only concerned with hardcoding the version of Hugo, and to use the Hugo Extended binary as required by our theme.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At the time of writing 0.58.3 is not the latest version of Hugo, whereas when I wrote &lt;code&gt;.travis.yml&lt;/code&gt; it was. I want the GitHub Actions build to be as close as possible to the TravisCI build in order to make them as similar as possible to prevent any unexpected build errors.&lt;/p&gt;
&lt;p&gt;Once I&amp;rsquo;ve achieved a successful build - I&amp;rsquo;ll look to upgrade to a newer version, and then iron out any issues from there.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#ff79c6&#34;&gt;name&lt;/span&gt;: Build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;run&lt;/span&gt;: hugo --gc --minify
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once &lt;code&gt;hugo&lt;/code&gt; is set up we can then build it easily enough, as self-documented in the code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#ff79c6&#34;&gt;name&lt;/span&gt;: Copy CNAME
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;run&lt;/span&gt;: cp CNAME ./public/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lastly, we can&amp;rsquo;t forget to copy the &lt;code&gt;CNAME&lt;/code&gt; file we made in &lt;a href=&#34;https://jdheyburn.co.uk/posts/who-goes-blogging-2-custom-domain/#solidying-our-changes-with-a-cname-file&#34;&gt;part 2&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;deployment-to-github-pages&#34;&gt;Deployment to GitHub Pages&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#ff79c6&#34;&gt;name&lt;/span&gt;: Deploy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;uses&lt;/span&gt;: peaceiris/actions-gh-pages@v3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;deploy_key&lt;/span&gt;: ${{ secrets.DEPLOY_KEY }}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;external_repository&lt;/span&gt;: jdheyburn/jdheyburn.github.io
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;publish_branch&lt;/span&gt;: master
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;publish_dir&lt;/span&gt;: ./public
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;commit_message&lt;/span&gt;: ${{ github.event.head_commit.message }}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the deployment to GitHub Pages I&amp;rsquo;m using the action &lt;a href=&#34;https://github.com/peaceiris/actions-gh-pages&#34;&gt;actions-gh-pages&lt;/a&gt;. Again it only requires a bare minimum of parameters to work; an explanation of what I&amp;rsquo;m using is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;deploy_key&lt;/code&gt; is the &lt;em&gt;private key&lt;/em&gt; we set up &lt;a href=&#34;https://jdheyburn.co.uk/blog/who-goes-blogging-3-2-deployment-methods-github-actions/#deployment-keys-setup&#34;&gt;earlier in this post&lt;/a&gt; in &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Secrets&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;If you didn&amp;rsquo;t name yours &lt;code&gt;DEPLOY_KEY&lt;/code&gt; then you&amp;rsquo;ll need to change it here too.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;external_repository&lt;/code&gt; tells the action where we want the built website to go to - we set this to our GitHub Pages repo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;publish_branch&lt;/code&gt; is the branch of the repo we publish to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;publish_dir&lt;/code&gt; is the directory on the build server that we want to push to the repo
&lt;ul&gt;
&lt;li&gt;Remember that &lt;code&gt;hugo&lt;/code&gt; builds the website to the &lt;code&gt;public&lt;/code&gt; directory locally&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commit_message&lt;/code&gt; allows us to specify a custom commit message to the target repo
&lt;ul&gt;
&lt;li&gt;Here I am telling it to inherit the commit message used in the source repo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bringing-it-all-together-again&#34;&gt;Bringing It All Together (Again)&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re migrating from a previous CI tool (perhaps Travis?) then you&amp;rsquo;ll need to disable the builds on there since you may cause a conflict either build process.&lt;/p&gt;
&lt;p&gt;For Travis, you can do that by navigating to your source code repo settings on Travis (&lt;a href=&#34;https://travis-ci.com/jdheyburn/jdheyburn.co.uk/settings&#34;&gt;https://travis-ci.com/jdheyburn/jdheyburn.co.uk/settings&lt;/a&gt; for me) and disabling &lt;code&gt;Build pushed branches&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&#34;center&#34;&gt;&lt;a href=&#34;travis-disable-build.png&#34;&gt;&lt;img src=&#34;https://jdheyburn.co.uk/blog/who-goes-blogging-3-2-deployment-methods-github-actions/travis-disable-build.png&#34;
         alt=&#34;Build pushed branches disabled on Travis&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;Now that&amp;rsquo;s done, go ahead and check in your new GitHub Actions workflow file and then navigate to the &lt;code&gt;Actions&lt;/code&gt; tab of your source code repo on GitHub.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add --all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Migrate to GitHub Actions&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;a href=&#34;github-actions-build.png&#34;&gt;&lt;img src=&#34;https://jdheyburn.co.uk/blog/who-goes-blogging-3-2-deployment-methods-github-actions/github-actions-build.png&#34;
         alt=&#34;Successful build on GitHub Actions&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;
            &lt;p&gt;Great success!&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Hopefully your build went to success! If it didn&amp;rsquo;t have a look through the logs and see what the issue was. It took me a few builds to determine my finalised workflow config. You can even see it at my &lt;a href=&#34;https://github.com/jdheyburn/jdheyburn.co.uk/actions&#34;&gt;source code repo Actions page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now that we&amp;rsquo;ve migrated across over to GitHub Actions, we can close out the permissions that TravisCI has on our projects, and demise any secret keys we gave it.&lt;/p&gt;
&lt;p&gt;From the tone of my writing you can probably tell which one I favour. That&amp;rsquo;s not to say I do not like TravisCI - each service has its own pros and cons. For this particular project, I prefer the one platform approach for which I am used to in GitLab. The number of build minutes available for GA is a concern, but not one I will have to worry about for now.&lt;/p&gt;
&lt;p&gt;Thanks for reading! üåù&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Who Goes Blogging 3.1: Deployment Methods - TravisCI</title><enclosure url="https://jdheyburn.co.uk/blog/who-goes-blogging-3-1-deployment-methods-travisci/travisci-card.png" type="image/jpg"></enclosure>
      
      <link>https://jdheyburn.co.uk/blog/who-goes-blogging-3-1-deployment-methods-travisci/</link>
      <pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jdheyburn.co.uk/blog/who-goes-blogging-3-1-deployment-methods-travisci/</guid>-->
      <description>&lt;h2 id=&#34;recap&#34;&gt;Recap&lt;/h2&gt;
&lt;p&gt;Since &lt;a href=&#34;https://jdheyburn.co.uk/posts/who-goes-blogging-1-getting-started/&#34;&gt;part 1&lt;/a&gt;, we have been using a simple bash script called &lt;code&gt;deploy.sh&lt;/code&gt; to build our Hugo website and upload it to our GitHub Pages repo. In &lt;a href=&#34;https://jdheyburn.co.uk/posts/who-goes-blogging-2-custom-domain/&#34;&gt;part 2&lt;/a&gt; we modified it slightly to include the &lt;code&gt;CNAME&lt;/code&gt; file post-build to ensure GitHub Pages uses the custom domain we set up in that same part.&lt;/p&gt;
&lt;p&gt;For this part, I will tell you about how I migrated from deploying via a script, to a CI/CD tool - namely &lt;a href=&#34;https://travis-ci.com/&#34;&gt;TravisCI&lt;/a&gt;. Then I will document how I migrated from this, to the new &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt;; GitHub&amp;rsquo;s offering into the CI/CD space.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CI/CD&lt;/code&gt; is an acronym for Continuous Integration / Continuous Deployment which is a very important concept in the DevOps culture.
If you would like to find out more about that and DevOps culture, check out these resources üëá&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/devops&#34;&gt;https://www.atlassian.com/devops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/faun/the-basics-of-continuous-integration-delivery-with-10-most-popular-tools-to-use-9514231533f0&#34;&gt;https://medium.com/faun/the-basics-of-continuous-integration-delivery-with-10-most-popular-tools-to-use-9514231533f0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.redhat.com/en/topics/devops/what-is-ci-cd&#34;&gt;https://www.redhat.com/en/topics/devops/what-is-ci-cd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/devops&#34;&gt;https://www.atlassian.com/devops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.co.uk/dp/B07B9F83WM&#34;&gt;https://www.amazon.co.uk/dp/B07B9F83WM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;I had originally planned this to be one post, but it soon became far too long - and I&amp;rsquo;m a fan of taking in content in sizeable chunks.&lt;/p&gt;
&lt;p&gt;So this post will focus on migrating to TravisCI from the &lt;code&gt;deploy.sh&lt;/code&gt; script. Whereas the next post will focus on migrating to, and setting up GitHub Actions. If you&amp;rsquo;re only interested in using that as your CI tool then I&amp;rsquo;ll provide a link to that here when it is posted.&lt;/p&gt;
&lt;h2 id=&#34;moving-away-from-deploysh&#34;&gt;Moving Away From deploy.sh&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s nothing necessarily wrong with using &lt;code&gt;deploy.sh&lt;/code&gt; to push our code, however we want to get all the bells and whistles that Continuous Integration can provide to us such as running a series of tests and checks automatically against every commit to our repository. Once those tests and checks pass then we can automate the deployment of our website.&lt;/p&gt;
&lt;p&gt;Now there are many CI tools out there with the most well known likely to be &lt;a href=&#34;https://jenkins.io/&#34;&gt;Jenkins&lt;/a&gt;, but there are also hosted solutions available which will take your code and perform your pipelines against them.&lt;/p&gt;
&lt;p&gt;One of those hosted solutions is &lt;a href=&#34;https://travis-ci.com/&#34;&gt;TravisCI&lt;/a&gt;, where they integrate quite nicely with GitHub repositories to attach &lt;a href=&#34;https://developer.github.com/webhooks/&#34;&gt;webhooks&lt;/a&gt; against them. They have several pricing options available, but for public open source projects, it is completely free!&lt;/p&gt;
&lt;p&gt;So it is a good idea to set your source code repository on GitHub to be public. TravisCI does include (at the time of writing) private projects in their free plan, but you are capped in some shape or form on how much the platform will do for you.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;travis-free.png&#34;&gt;&lt;img src=&#34;https://jdheyburn.co.uk/blog/who-goes-blogging-3-1-deployment-methods-travisci/travis-free.png&#34;
         alt=&#34;Screenshot of Travis free pricing plan&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;
            &lt;p&gt;Free is definitely a thing you love to see&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;travisci-account-setup&#34;&gt;TravisCI Account Setup&lt;/h2&gt;
&lt;p&gt;The TravisCI account setup for TravisCI is very streamlined - instead of creating &lt;em&gt;another&lt;/em&gt; account for you to manage, it integrates in with GitHub, so this is the account you use to sign-up with. Head over to &lt;a href=&#34;https://travis-ci.com/&#34;&gt;https://travis-ci.com/&lt;/a&gt; and click on &lt;code&gt;Sign in with GitHub&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;travis-landing.png&#34;&gt;&lt;img src=&#34;https://jdheyburn.co.uk/blog/who-goes-blogging-3-1-deployment-methods-travisci/travis-landing.png&#34;
         alt=&#34;Screenshot of Travis landing page&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;
            &lt;p&gt;You can&amp;rsquo;t resist a big green button&amp;hellip;&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;GitHub will ask you if you &lt;em&gt;really&lt;/em&gt; want to share some of your GitHub data with Travis.&lt;/p&gt;
&lt;figure class=&#34;center&#34;&gt;&lt;a href=&#34;travis-github-authorise.png&#34;&gt;&lt;img src=&#34;https://jdheyburn.co.uk/blog/who-goes-blogging-3-1-deployment-methods-travisci/travis-github-authorise.png&#34;
         alt=&#34;Screenshot of GitHub authorising Travis&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;
            &lt;p&gt;Another green button? Why not!&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Once you&amp;rsquo;ve done that, you&amp;rsquo;ll be redirected to your new Travis Dashboard which&amp;hellip; is looking rather lonely üò¶ - let&amp;rsquo;s fix that!&lt;/p&gt;
&lt;p&gt;All we&amp;rsquo;ve done so far is allowed Travis to reach GitHub for creating an account for us - we now need to activate GitHub Apps integration to permit it to read and write to our repositories. The &lt;a href=&#34;https://travis-ci.com/account/repositories&#34;&gt;https://travis-ci.com/account/repositories&lt;/a&gt; page is what you need for that - then click on the &lt;code&gt;Activate&lt;/code&gt; button.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;travis-github-apps-integration.png&#34;&gt;&lt;img src=&#34;https://jdheyburn.co.uk/blog/who-goes-blogging-3-1-deployment-methods-travisci/travis-github-apps-integration.png&#34;
         alt=&#34;Screenshot of GitHub Apps Integration&#34;/&gt;&lt;/a&gt;&lt;figcaption&gt;
            &lt;p&gt;&amp;hellip;More green buttons?!&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Now on the next screen you may or may not want the default selection of &lt;code&gt;All repositories&lt;/code&gt; which will give Travis read and write access to all your repos. I completely trust Travis if I were to select this, however it is a best practice to follow the &lt;a href=&#34;https://en.wikipedia.org/wiki/Principle_of_least_privilege&#34;&gt;&lt;em&gt;principle of least privilege&lt;/em&gt;&lt;/a&gt; (POLP); not just for users but for services too.&lt;/p&gt;
&lt;p&gt;For the scope of this effort we&amp;rsquo;re only wanting Travis to read and manipulate against two repos, &lt;code&gt;jdheyburn.co.uk&lt;/code&gt; and &lt;code&gt;jdheyburn.github.io&lt;/code&gt; - it also gives you a cleaner Travis dashboard too.&lt;/p&gt;
&lt;figure class=&#34;center&#34;&gt;&lt;a href=&#34;travis-github-repos-selection.png&#34;&gt;&lt;img src=&#34;https://jdheyburn.co.uk/blog/who-goes-blogging-3-1-deployment-methods-travisci/travis-github-repos-selection.png&#34;
         alt=&#34;Screenshot of GitHub Travis Repository Authorisation&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;back-to-github&#34;&gt;Back to GitHub&lt;/h3&gt;
&lt;p&gt;The next step is required to permit Travis to push the built project to our GitHub Pages repo. We need to generate a secret with the permissions that Travis requires and keep it aside for the Travis config file later.&lt;/p&gt;
&lt;p&gt;Navigate to the &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;GitHub Personal Access Tokens&lt;/a&gt; page and click on &lt;code&gt;Generate new token&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll come across a page asking for the name of the token being created. It doesn&amp;rsquo;t matter what you call it, but it may be useful to link it back to what it is being used for. You&amp;rsquo;re also going to want to select the &lt;code&gt;repo&lt;/code&gt; checkbox as done so below.&lt;/p&gt;
&lt;p&gt;After this you don&amp;rsquo;t need to provide any more permissions to the token. Scroll down to the end of the page and click &lt;code&gt;Generate token&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&#34;center&#34;&gt;&lt;a href=&#34;travis-github-pat.png&#34;&gt;&lt;img src=&#34;https://jdheyburn.co.uk/blog/who-goes-blogging-3-1-deployment-methods-travisci/travis-github-pat.png&#34;
         alt=&#34;Screenshot of GitHub Personal Access Token Creation - repos is checked&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;The token&amp;rsquo;s secret will display on the next screen. &lt;strong&gt;Make sure you copy it&lt;/strong&gt; and place it somewhere you can refer back to it later such as a text editor like Notepad - we&amp;rsquo;ll need it again in the next section.&lt;/p&gt;
&lt;figure class=&#34;center&#34;&gt;&lt;a href=&#34;travis-github-pat-created.png&#34;&gt;&lt;img src=&#34;https://jdheyburn.co.uk/blog/who-goes-blogging-3-1-deployment-methods-travisci/travis-github-pat-created.png&#34;
         alt=&#34;Screenshot of GitHub Personal Access Token Creation - token complete&#34;/&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;travisci-configuration&#34;&gt;TravisCI Configuration&lt;/h2&gt;
&lt;p&gt;Once we have our Travis account set up, we need to add in a &lt;a href=&#34;https://docs.travis-ci.com/user/tutorial/&#34;&gt;configuration file&lt;/a&gt; that Travis will read from to determine what steps we&amp;rsquo;d like it to perform.&lt;/p&gt;
&lt;p&gt;In our source code repository (&lt;code&gt;jdheyburn.co.uk&lt;/code&gt; in my case) we want to create a file at the root directory and call it &lt;code&gt;.travis.yml&lt;/code&gt;. See below for an example of how I configured mine.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/jdheyburn/073bd6d4cb9284774e7e7feee093d86f.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Let&amp;rsquo;s break it down section by section.&lt;/p&gt;
&lt;h3 id=&#34;build-environment&#34;&gt;Build Environment&lt;/h3&gt;
&lt;p&gt;These settings here all refer to the build environment that we&amp;rsquo;d like our project to build on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;dist&lt;/span&gt;: xenial
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;git&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;depth&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;global&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - HUGO_VERSION=&amp;#34;0.58.3&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;matrix&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;secure&lt;/span&gt;: REDACTED
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;dist&lt;/code&gt; specifies what platform Travis should build the project on. In this case &lt;code&gt;xenial&lt;/code&gt; refers to Ubuntu 16.04, which is a Linux distribution. There are &lt;a href=&#34;https://docs.travis-ci.com/user/reference/overview/&#34;&gt;several others&lt;/a&gt; to choose from and more likely than not you&amp;rsquo;ll want the platform to be Linux. However if you had a Windows application written in &lt;code&gt;.NET&lt;/code&gt; then you would likely want it built on a Windows Server since that is what supports it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git.depth&lt;/code&gt; tells Travis how many commits of your project to check out. This is passed directory to the &lt;code&gt;git&lt;/code&gt; parameter &lt;code&gt;--depth&lt;/code&gt; (more info on that &lt;a href=&#34;https://git-scm.com/docs/git-clone&#34;&gt;here&lt;/a&gt;). For our use case we&amp;rsquo;re not interested in this option so we set it to &lt;code&gt;false&lt;/code&gt; to disable the flag being passed to &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;env.global&lt;/code&gt; allows us to define what variables should be set in the environment. This is done in the form of an array of strings in the format &lt;code&gt;key=value&lt;/code&gt;. So given the example, &lt;code&gt;HUGO_VERSION&lt;/code&gt; will be set to &lt;code&gt;0.58.3&lt;/code&gt;. We&amp;rsquo;ll come back to this later.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;env.matrix&lt;/code&gt; is the encrypted value that gets passed to the &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; environment variable which is used to allow Travis to commit the built project to our GitHub Pages repo.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You&amp;rsquo;re going to want to take the personal access token generated from GitHub in the earlier step and encrypt it using &lt;a href=&#34;https://docs.travis-ci.com/user/environment-variables#encrypting-environment-variables&#34;&gt;this method&lt;/a&gt;, then add it back to this setting&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;external-dependencies&#34;&gt;External Dependencies&lt;/h3&gt;
&lt;p&gt;Once the build environment is defined, we can tell Travis to pull in some additional dependencies or files required for our project. Now remember this is a &lt;code&gt;hugo&lt;/code&gt; project and we needed to install it on our local machines to run &lt;code&gt;deploy.sh&lt;/code&gt;, we need to do the same for Travis too.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;install&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- wget -q https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_Linux-64bit.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- tar xf hugo_extended_${HUGO_VERSION}_Linux-64bit.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- mv hugo ~/bin/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remember we defined &lt;code&gt;HUGO_VERSION&lt;/code&gt; earlier? This is where it is called back again. In order, the steps we&amp;rsquo;re performing are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Downloading the archive containing the specified &lt;code&gt;hugo&lt;/code&gt; version&lt;/li&gt;
&lt;li&gt;Extracting all contents of the archive&lt;/li&gt;
&lt;li&gt;Moving the &lt;code&gt;hugo&lt;/code&gt; binary to the &lt;code&gt;~/bin/&lt;/code&gt; directory
&lt;ul&gt;
&lt;li&gt;This directory is on the build servers &lt;code&gt;PATH&lt;/code&gt;, which enables us to execute the binary using just the &lt;code&gt;hugo&lt;/code&gt; command later&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;previous-issues&#34;&gt;Previous Issues&lt;/h4&gt;
&lt;p&gt;In a previous version of &lt;code&gt;hugo&lt;/code&gt; I used, there was an additional dependency I needed to include. The &lt;code&gt;hugo-coder&lt;/code&gt; theme requires to be built with Hugo Extended since it requires Sass/SCSS support.&lt;/p&gt;
&lt;p&gt;For this particular Hugo Extended version, it required a library which was not included in the build server distribution in the past. On the plus side - Travis allows us to define additional build steps to ensure all required libraries are on the build server beforehand.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;before_install&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;# This workaround is required to avoid libstdc++ errors while running &amp;#34;extended&amp;#34; hugo with SASS support.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; - wget -q -O libstdc++6 http://security.ubuntu.com/ubuntu/pool/main/g/gcc-5/libstdc++6_5.4.0-6ubuntu1~16.04.10_amd64.deb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; - sudo dpkg --force-all -i libstdc++6
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However in later versions of Hugo (including the one I am using today) this dependency is no longer required, hence why it is commented out in &lt;code&gt;.travis.yml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You may not need this stage in your pipeline, I know my project no longer requires it. However this may come in handy later knowing that you have the option of specifying more pipeline steps if the build distribution you&amp;rsquo;re using requires some additional dependencies.&lt;/p&gt;
&lt;h3 id=&#34;build-script&#34;&gt;Build Script&lt;/h3&gt;
&lt;p&gt;Now onto the juicy stuff - building the project. This is pretty much where the &lt;code&gt;deploy.sh&lt;/code&gt; starts from, since on our local machines we already had the &lt;code&gt;hugo&lt;/code&gt; binary installed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- hugo version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- hugo --gc --minify
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- cp CNAME public/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Not a lot is going on here, but to detail what each step is doing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Print out the version of &lt;code&gt;hugo&lt;/code&gt; being used&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is helpful for debugging the build. By printing out the version used we can try to replicate the bug locally for troubleshooting.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build the project&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We do this with two flags, &lt;code&gt;--gc&lt;/code&gt; and &lt;code&gt;--minify&lt;/code&gt;. These weren&amp;rsquo;t defined in the &lt;code&gt;deploy.sh&lt;/code&gt; script we used earlier so let&amp;rsquo;s cover them here.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--gc&lt;/code&gt; tells &lt;code&gt;hugo&lt;/code&gt; to cleanup some unused cache files after the build
&lt;ul&gt;
&lt;li&gt;This helps keep a tidy environment for the build server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--minify&lt;/code&gt; performs &lt;a href=&#34;https://en.wikipedia.org/wiki/Minification_(programming)&#34;&gt;minification&lt;/a&gt; on your website to reduce the size of the generated content, enabling it to load faster on your users&amp;rsquo; devices
&lt;ul&gt;
&lt;li&gt;Coupled with a CDN like in the &lt;a href=&#34;https://jdheyburn.co.uk/posts/who-goes-blogging-2-custom-domain/#adding-our-cdn-layer&#34;&gt;previous part&lt;/a&gt;, your website will load almost instantly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy the &lt;code&gt;CNAME&lt;/code&gt; file from the project root to the generated &lt;code&gt;public/&lt;/code&gt; directory.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This ensures that the custom domain name we set up in the previous part continues to be set in the generated website code that gets pushed to our GitHub Pages repo. &lt;a href=&#34;https://jdheyburn.co.uk/posts/who-goes-blogging-2-custom-domain/#building-into-our-deploy-script&#34;&gt;See here&lt;/a&gt; for a refresher.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This section is effectively the &amp;lsquo;CI&amp;rsquo; part of &amp;lsquo;CI/CD&amp;rsquo;. We could stop here and just use Travis as a build server to determine whether the website is able to be built successfully. Any errors in the pipeline would have resulted in a failed build.&lt;/p&gt;
&lt;p&gt;The next section details the Continuous Deployment, ensuring that on the successful build of a project we deploy it to our production environment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;deploy-to-github-pages&#34;&gt;Deploy to GitHub Pages&lt;/h3&gt;
&lt;p&gt;Once the project has been built, we need to push it to the GitHub Pages repository. Travis has &lt;a href=&#34;https://docs.travis-ci.com/user/deployment/pages/&#34;&gt;good documentation&lt;/a&gt; on this. My setup follows the below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;deploy&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;provider&lt;/span&gt;: pages
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;skip-cleanup&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;github-token&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;$GITHUB_TOKEN&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;keep-history&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;local-dir&lt;/span&gt;: public
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;repo&lt;/span&gt;: jdheyburn/jdheyburn.github.io
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;target-branch&lt;/span&gt;: master
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;verbose&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the last time, let&amp;rsquo;s walk through what each of these is doing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;provider&lt;/code&gt; tells Travis this is a GitHub Pages deployment&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skip-cleanup&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;, so that Travis does not delete the build before we&amp;rsquo;ve got the chance to upload it&lt;/li&gt;
&lt;li&gt;&lt;code&gt;github-token&lt;/code&gt; is set to the environment variable &lt;code&gt;$GITHUB_TOKEN&lt;/code&gt; which was set for us earlier on in the build environment.
&lt;ul&gt;
&lt;li&gt;This is passed to the provider so that it has valid credentials to push the code to the GitHub Pages repo.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keep-history&lt;/code&gt; performs an incremental commit against the project
&lt;ul&gt;
&lt;li&gt;Setting it to &lt;code&gt;true&lt;/code&gt; allows us to view back the changes in the commit history such as &lt;a href=&#34;https://github.com/jdheyburn/jdheyburn.github.io/commit/419da0cc71415d0253996b823d4ccf6844db4042&#34;&gt;this one&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;local-dir&lt;/code&gt; specifies the directory that should be pushed to the target repo
&lt;ul&gt;
&lt;li&gt;We set it to &lt;code&gt;public&lt;/code&gt; because that is the name of the generated website directory from the previous &lt;code&gt;script&lt;/code&gt; step&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repo&lt;/code&gt; is the target repo where we should be deploying to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target-branch&lt;/code&gt; is the branch that we want &lt;code&gt;local-dir&lt;/code&gt; to be pushed to
&lt;ul&gt;
&lt;li&gt;For our setup we are using &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;verbose&lt;/code&gt; specifies how much detail Travis will log about its deploy activities&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That concludes the configuration section. Remember to change it or add in some other functionality needed for your project and save it to &lt;code&gt;.travis.yml&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;bringing-it-all-together&#34;&gt;Bringing It All Together&lt;/h2&gt;
&lt;p&gt;Now you&amp;rsquo;ve completed your config file, let&amp;rsquo;s check it all in to GitHub.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add --all
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Adding CI&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Travis will automatically detect that a new change has been made against your repo. And with the inclusion of &lt;code&gt;.travis.yml&lt;/code&gt;, it will now work against that file.&lt;/p&gt;
&lt;p&gt;You can view the status of your repository&amp;rsquo;s build by navigating to it from the &lt;a href=&#34;https://travis-ci.com/dashboard&#34;&gt;dashboard&lt;/a&gt; and clicking on it.&lt;/p&gt;
&lt;p&gt;If any of the commands in the &lt;code&gt;script&lt;/code&gt; section of the config return a &lt;a href=&#34;https://en.wikipedia.org/wiki/Exit_status#Shell_and_scripts&#34;&gt;nonzero status code&lt;/a&gt;, the build will fail. If this happens then have a look at a build log and investigate the issue. More likely than not someone else has encountered the problem before, so Google is your gatekeeper to solutions!&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;ve got a successful build, that means your website has been deployed to the GitHub Pages repo and will be available on the web to view. In a browser you can now view your changes on the website.&lt;/p&gt;
&lt;p&gt;If they aren&amp;rsquo;t there then your browser is most likely caching an older version. By default, websites served by GitHub Pages have a browser cache TTL &lt;a href=&#34;https://webapps.stackexchange.com/questions/119286/caching-assets-in-website-served-from-github-pages&#34;&gt;set to 10 minutes&lt;/a&gt;. So you can either wait 10 minutes, or clear your browser cache!&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;re on the way to DevOps masterclass. As mentioned the next post will focus on migrating to GitHub Actions so if you&amp;rsquo;re happy with TravisCI then there&amp;rsquo;s no more you need to do! Go ahead and add other repositories you may have to Travis and build up multiple pipelines üôå&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>