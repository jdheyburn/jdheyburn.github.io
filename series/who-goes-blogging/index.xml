<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Who Goes Blogging on JDHeyburn</title><link>https://jdheyburn.co.uk/series/who-goes-blogging/</link><description>Recent content in Who Goes Blogging on JDHeyburn</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 31 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://jdheyburn.co.uk/series/who-goes-blogging/index.xml" rel="self" type="application/rss+xml"/><item><title>Who Goes Blogging 4: Content Structure &amp; Refactoring</title><link>https://jdheyburn.co.uk/blog/who-goes-blogging-4-content-structure-and-refactoring/</link><pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/who-goes-blogging-4-content-structure-and-refactoring/</guid><description>&lt;p>So far in this series we&amp;rsquo;ve been looking at the infrastructure behind the Hugo website, but I haven&amp;rsquo;t looked into improving the content layout of the site. Some of the improvements I want to make are:&lt;/p>
&lt;ol>
&lt;li>Moving content articles from a flat structure to a leaf bundle&lt;/li>
&lt;li>Rename content section to &lt;strong>blog&lt;/strong> from &lt;strong>posts&lt;/strong>&lt;/li>
&lt;li>Upgrading &lt;code>hugo-coder&lt;/code> theme and &lt;code>hugo&lt;/code> version&lt;/li>
&lt;li>Adding a table of contents to the pages&lt;/li>
&lt;li>&amp;hellip; and further improvements as I find them&lt;/li>
&lt;/ol>
&lt;p>This post will cover items 1-2, the others will be in a follow up post.&lt;/p>
&lt;h2 id="content-article-reorganising">Content Article Reorganising&lt;/h2>
&lt;p>Hugo has a few different ways you can organise your content, known as &lt;a href="https://gohugo.io/content-management/page-bundles/">Page Bundles&lt;/a>. Up to now I&amp;rsquo;ve adopted &lt;a href="https://gohugo.io/content-management/page-bundles/#branch-bundles">Branch Bundles&lt;/a> where I have all my articles in named markdown files under the &lt;code>content/posts&lt;/code> directory - acting as the branch bundle, and storing all images under &lt;code>static/images&lt;/code> - so the article at &lt;code>content/posts/blog-bootstrap.md&lt;/code> will be available at &lt;code>/posts/blog-bootstrap/&lt;/code>. As time has gone on, the images directory has gotten rather large and difficult to understand what images apply to what posts.&lt;/p>
&lt;p>The alternative way to organise content is the &lt;a href="https://gohugo.io/content-management/page-bundles/#leaf-bundles">Leaf Bundle&lt;/a>. This is where at a branch level you have a directory with the name of the article you wish to publish, followed by an &lt;code>index.md&lt;/code> file with the article content - such as &lt;code>content/posts/blog-bootstrap/index.md&lt;/code>.&lt;/p>
&lt;p>Any page resources defined in this directory can be referenced relatively in the markdown files within it, such that any images can be stored within &lt;code>content/posts/blog-bootstrap/&lt;/code> and referred to in the markdown as &lt;code>figure src=&amp;quot;my-relative-img.png&amp;quot; ...&lt;/code> as opposed to &lt;code>src=&amp;quot;/images/my-not-relative-img.png&amp;quot; ...&lt;/code>.&lt;/p>
&lt;p>This allows me to organise content much more effectively such that we will be going from this structure:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ tree content/posts
content/posts
├── blog-bootstrap.md
├── extending-gotests-for-strict-error-tests.md
├── on-becoming-an-open-source-software-contributor.md
├── three-ways-to-spice-up-your-python-code.md
├── who-goes-blogging-0-applying-cartography.md
├── who-goes-blogging-1-getting-started.md
├── who-goes-blogging-2-custom-domain.md
├── who-goes-blogging-3-1-deployment-methods-travisci.md
└── who-goes-blogging-3-2-deployment-methods-github-actions.md
&lt;span style="color:#3677a9">0&lt;/span> directories, &lt;span style="color:#3677a9">9&lt;/span> files
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ tree static/images
static/images
├── analytics_example.png
├── ... &lt;span style="color:#999;font-style:italic"># Everything stored in a flat hierarchy&lt;/span>
└── type_hinting.png
&lt;span style="color:#3677a9">0&lt;/span> directories, &lt;span style="color:#3677a9">57&lt;/span> files
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ tree content/posts
content/posts
├── blog-bootstrap
│ └── index.md
├── extending-gotests-for-strict-error-tests
│ └── index.md
├── on-becoming-an-open-source-software-contributor
│ ├── card.png
│ ├── elephant-cartoon.png
│ └── index.md
├── ...
└── who-goes-blogging-3-2-deployment-methods-github-actions
├── gha-deploy-key.png
├── gha-secrets-key.png
├── github-actions-build.png
├── index.md
└── travis-disable-build.png
&lt;span style="color:#3677a9">9&lt;/span> directories, &lt;span style="color:#3677a9">45&lt;/span> files
&lt;/code>&lt;/pre>&lt;/div>&lt;p>One other benefit of grouping all content together in a bundle is it allows you to use just one command to add your article content to the repository - no more will images in another directory be forgotten about!&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git add content/blog/&lt;span style="color:#40ffff">$articleName&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="transformation-script">Transformation Script&lt;/h3>
&lt;p>As opposed to doing the transformation manually, I&amp;rsquo;ve written a script which will move and alter the files for us.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#686868">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># in project root dir&lt;/span>
&lt;span style="color:#40ffff">posts&lt;/span>=&lt;span style="color:#6ab825;font-weight:bold">$(&lt;/span>find content/posts -type f -name &lt;span style="color:#ed9d13">&amp;#39;*.md&amp;#39;&lt;/span> -not -path &lt;span style="color:#ed9d13">&amp;#39;**/index.md&amp;#39;&lt;/span> -not -path &lt;span style="color:#ed9d13">&amp;#39;**/_index.md&amp;#39;&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">)&lt;/span>
&lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;&lt;/span>&lt;span style="color:#40ffff">$posts&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&lt;/span> | &lt;span style="color:#6ab825;font-weight:bold">while&lt;/span> &lt;span style="color:#24909d">read&lt;/span> p; &lt;span style="color:#6ab825;font-weight:bold">do&lt;/span>
&lt;span style="color:#999;font-style:italic"># Move to leaf bundle&lt;/span>
&lt;span style="color:#40ffff">postFname&lt;/span>=&lt;span style="color:#6ab825;font-weight:bold">$(&lt;/span>basename -- &lt;span style="color:#ed9d13">&amp;#34;&lt;/span>&lt;span style="color:#40ffff">$p&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">)&lt;/span>
&lt;span style="color:#40ffff">title&lt;/span>=&lt;span style="color:#ed9d13">&amp;#34;&lt;/span>&lt;span style="color:#ed9d13">${&lt;/span>&lt;span style="color:#40ffff">postFname&lt;/span>%.*&lt;span style="color:#ed9d13">}&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&lt;/span>
&lt;span style="color:#40ffff">leafBundleDir&lt;/span>=content/posts/&lt;span style="color:#40ffff">$title&lt;/span>
mkdir &lt;span style="color:#40ffff">$leafBundleDir&lt;/span>
&lt;span style="color:#40ffff">newPostLocation&lt;/span>=&lt;span style="color:#40ffff">$leafBundleDir&lt;/span>/index.md
git mv -v &lt;span style="color:#40ffff">$p&lt;/span> &lt;span style="color:#40ffff">$newPostLocation&lt;/span>
&lt;span style="color:#999;font-style:italic"># Move images referenced in the articles to new leaf bundle dir&lt;/span>
&lt;span style="color:#40ffff">images&lt;/span>=&lt;span style="color:#6ab825;font-weight:bold">$(&lt;/span>grep -oP &lt;span style="color:#ed9d13">&amp;#39;images\/.*.(png|jpg|jpeg)&amp;#39;&lt;/span> &lt;span style="color:#40ffff">$newPostLocation&lt;/span> | xargs -n1 | sort -u&lt;span style="color:#6ab825;font-weight:bold">)&lt;/span>
&lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;&lt;/span>&lt;span style="color:#40ffff">$images&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&lt;/span> | &lt;span style="color:#6ab825;font-weight:bold">while&lt;/span> &lt;span style="color:#24909d">read&lt;/span> i; &lt;span style="color:#6ab825;font-weight:bold">do&lt;/span>
[ -z &lt;span style="color:#ed9d13">&amp;#34;&lt;/span>&lt;span style="color:#40ffff">$i&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&lt;/span> ] &amp;amp;&amp;amp; &lt;span style="color:#6ab825;font-weight:bold">continue&lt;/span>
&lt;span style="color:#40ffff">imgFname&lt;/span>=&lt;span style="color:#6ab825;font-weight:bold">$(&lt;/span>basename -- &lt;span style="color:#ed9d13">&amp;#34;&lt;/span>&lt;span style="color:#40ffff">$i&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">)&lt;/span>
git mv -v static/&lt;span style="color:#40ffff">$i&lt;/span> &lt;span style="color:#40ffff">$leafBundleDir&lt;/span>/&lt;span style="color:#40ffff">$imgFname&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">done&lt;/span>
&lt;span style="color:#999;font-style:italic"># Change references to images in the article&lt;/span>
&lt;span style="color:#999;font-style:italic">## figure src=&amp;#34;/images/namecheap-domain-purchase.png&amp;#34;&lt;/span>
sed -i &lt;span style="color:#ed9d13">&amp;#39;s/src=&amp;#34;\/images\//src=&amp;#34;/g&amp;#39;&lt;/span> &lt;span style="color:#40ffff">$newPostLocation&lt;/span>
&lt;span style="color:#999;font-style:italic">## images:&lt;/span>
&lt;span style="color:#999;font-style:italic">## - images/namecheap_landing.png&lt;/span>
sed -i &lt;span style="color:#ed9d13">&amp;#39;s/- images\//- /g&amp;#39;&lt;/span> &lt;span style="color:#40ffff">$newPostLocation&lt;/span>
&lt;span style="color:#999;font-style:italic">## [blog_arch]: /images/blog-arch-cover.png&lt;/span>
sed -i &lt;span style="color:#ed9d13">&amp;#39;s/: \/images\//: /g&amp;#39;&lt;/span> &lt;span style="color:#40ffff">$newPostLocation&lt;/span>
git add &lt;span style="color:#40ffff">$newPostLocation&lt;/span>
&lt;span style="color:#6ab825;font-weight:bold">done&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;p>Breaking down the script, firstly we are retrieving all posts that aren&amp;rsquo;t already converted to a leaf bundle and looping over them, where lines 4-9 performs the conversion itself.&lt;/p>
&lt;p>Once that is done then we need to get all images that are referenced in that post and move them to the new leaf bundle for the post. This is done in lines 12-17.&lt;/p>
&lt;p>Lastly, we then need to change the post content itself so that it references images in the location relative to the leaf bundle instead of under &lt;code>static/images&lt;/code> - lines 21-26 accomplish this.&lt;/p>
&lt;p>Hugo allows you to define &lt;code>img&lt;/code> blocks in several ways, where I&amp;rsquo;m currently using 3 of these methods. I &lt;del>probably&lt;/del> should replace these with one approach - for the time being 3 &lt;code>sed&lt;/code> commands will do the trick for me.&lt;/p>
&lt;blockquote>
&lt;p>I&amp;rsquo;m sure that a few lines could be cut out with some better regex expressions - but I&amp;rsquo;m not an expert at them so I&amp;rsquo;d rather crack on with what I know 😃&lt;/p>
&lt;/blockquote>
&lt;h2 id="renaming-content-section">Renaming Content Section&lt;/h2>
&lt;p>A gripe I&amp;rsquo;ve had with my site is when you click on &lt;strong>Blog&lt;/strong> in the site header it takes you to &lt;strong>Posts&lt;/strong>. Similar to the previous section this is because of &lt;a href="https://gohugo.io/content-management/page-bundles/#branch-bundles">Branch Bundles&lt;/a> which are any directory that sits underneath the &lt;code>content&lt;/code> directory. The bundle name here is what forms the URL and the parent page for those articles &lt;a href="https://gohugo.io/content-management/sections/">as defined&lt;/a>.&lt;/p>
&lt;p>Based on this information, migrating should be as easy as&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git mv content/posts/ content/blog/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Despite doing this, we come across some problems&amp;hellip;&lt;/p>
&lt;ol>
&lt;li>We lose the correct rendering for the article
&lt;ul>
&lt;li>Hugo doesn&amp;rsquo;t know how to render content with type &lt;code>blog&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Existing URL links are broken
&lt;ul>
&lt;li>All hyperlinks both internal and external are referring to articles at &lt;code>/posts/&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Blog landing page is now &lt;strong>Blogs&lt;/strong>?? (see below)&lt;/li>
&lt;/ol>
&lt;figure>
&lt;img src="blogs-landing-page.png"
alt="Screenshot of Blog landing page with incorrect Blogs title"/>
&lt;/figure>
&lt;p>Let&amp;rsquo;s walk through them one by one.&lt;/p>
&lt;h3 id="fixing-article-rendering">Fixing Article Rendering&lt;/h3>
&lt;p>We just made our existing articles leaf bundles that sat under &lt;code>content/posts&lt;/code>, but now this is renamed to &lt;code>content/blog&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ tree contents/blog -L &lt;span style="color:#3677a9">1&lt;/span>
content/blog
├── blog-bootstrap
├── extending-gotests-for-strict-error-tests
├── on-becoming-an-open-source-software-contributor
├── three-ways-to-spice-up-your-python-code
├── who-goes-blogging-0-applying-cartography
├── who-goes-blogging-1-getting-started
├── who-goes-blogging-2-custom-domain
├── who-goes-blogging-3-1-deployment-methods-travisci
└── who-goes-blogging-3-2-deployment-methods-github-actions
&lt;span style="color:#3677a9">9&lt;/span> directories, &lt;span style="color:#3677a9">0&lt;/span> files
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The section of which your article sits underneath also tells Hugo how it should render the page - known as &lt;a href="https://gohugo.io/content-management/types/#defining-a-content-type">Content Types&lt;/a>. Take the article blog-bootstrap which is under &lt;code>posts&lt;/code>; Hugo will look in the theme for &lt;code>layouts/posts&lt;/code> for &lt;code>html&lt;/code> files to render it against* - this is how the articles go from a markdown file to rendered HTML.&lt;/p>
&lt;blockquote>
&lt;p>* Hugo will &lt;a href="https://gohugo.io/templates/lookup-order/">first look&lt;/a> in your local project for any overriding files.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ tree themes/hugo-coder/layouts/posts
themes/hugo-coder/layouts/posts
├── li.html
├── list.html
└── single.html
&lt;span style="color:#3677a9">0&lt;/span> directories, &lt;span style="color:#3677a9">3&lt;/span> files
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When we change the section name the article sits in, Hugo will not know how to render it correctly and will resolve to the default rendering for the theme. This ends us with something like the below.&lt;/p>
&lt;figure>
&lt;img src="posts-blog-rendering-error.png"
alt="Screenshot of comparison of correct and incorrect rendering - publish date, minutes to read, and tags are missing"/> &lt;figcaption>
&lt;p>Correct rendering on the left - notice publish date, minutes to read, and tags are missing&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>One way of fixing this would be to also change the &lt;code>hugo-coder&lt;/code> theme from &lt;code>layouts/posts&lt;/code> to &lt;code>layouts/blog&lt;/code> - however a much simpler solution exists. We can use the &lt;code>type&lt;/code> front matter setting to tell Hugo what layout to use to render it.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">---&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">date&lt;/span>:&lt;span style="color:#666"> &lt;/span>2020-03-10&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">title&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Who Goes Blogging 3.2: Deployment Methods - GitHub Actions&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">description&lt;/span>:&lt;span style="color:#666"> &lt;/span>Migrating&lt;span style="color:#666"> &lt;/span>to&lt;span style="color:#666"> &lt;/span>GitHub&lt;span style="color:#666"> &lt;/span>Actions&lt;span style="color:#666"> &lt;/span>as&lt;span style="color:#666"> &lt;/span>our&lt;span style="color:#666"> &lt;/span>CI&lt;span style="color:#666"> &lt;/span>tool&lt;span style="color:#666">
&lt;/span>&lt;span style="display:block;width:100%;background-color:#363636">&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>posts&lt;span style="color:#666">
&lt;/span>&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># ...&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>---&lt;/code>&lt;/pre>&lt;/div>
&lt;blockquote>
&lt;p>Hugo &lt;a href="https://gohugo.io/content-management/front-matter">front matter&lt;/a> are content parameter settings you place into the heading of the content - an example of this is right above!&lt;/p>
&lt;/blockquote>
&lt;p>Having to define this in every new article can become repetitive. We can make this easier for ourselves by using &lt;a href="https://gohugo.io/content-management/archetypes/">archetypes&lt;/a>; which are essentially templates that new content is templated from.&lt;/p>
&lt;p>In your project root directory, create the &lt;code>archetypes/blog&lt;/code> directory and in there a file called &lt;code>index.md&lt;/code>, and populate it with the below:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">---&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">draft&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>posts&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># ... Add in other defaults as you see fit&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>---&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can then create new content from this template like so:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ hugo new --kind blog blog/blog-post
/home/jdheyburn/projects/jdheyburn.co.uk/content/blog/blog-post created
$ tree content/blog/blog-post
content/blog/blog-post
└── index.md
&lt;span style="color:#3677a9">0&lt;/span> directories, &lt;span style="color:#3677a9">1&lt;/span> file
$ cat content/blog/blog-post/index.md
---
draft: &lt;span style="color:#24909d">true&lt;/span>
type: posts
&lt;span style="color:#999;font-style:italic"># ...&lt;/span>
---
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="fixing-existing-urls">Fixing Existing URLs&lt;/h3>
&lt;p>Changing the section the article is in affects the URL too; meaning articles will appear at &lt;code>https://jdheyburn.co.uk/blog/blog-bootstrap/&lt;/code> instead of &lt;code>https://jdheyburn.co.uk/posts/blog-bootstrap/&lt;/code>. Therefore existing hyperlinks pointing to these articles will break.&lt;/p>
&lt;p>Tnere is another quick fix available for us through the front matter setting &lt;code>aliases&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">---&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">date&lt;/span>:&lt;span style="color:#666"> &lt;/span>2020-03-10&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">title&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;Who Goes Blogging 3.2: Deployment Methods - GitHub Actions&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">description&lt;/span>:&lt;span style="color:#666"> &lt;/span>Migrating&lt;span style="color:#666"> &lt;/span>to&lt;span style="color:#666"> &lt;/span>GitHub&lt;span style="color:#666"> &lt;/span>Actions&lt;span style="color:#666"> &lt;/span>as&lt;span style="color:#666"> &lt;/span>our&lt;span style="color:#666"> &lt;/span>CI&lt;span style="color:#666"> &lt;/span>tool&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">type&lt;/span>:&lt;span style="color:#666"> &lt;/span>posts&lt;span style="color:#666">
&lt;/span>&lt;span style="display:block;width:100%;background-color:#363636">&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">aliases&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;/span>&lt;span style="display:block;width:100%;background-color:#363636">&lt;span style="color:#666"> &lt;/span>- /posts/who-goes-blogging&lt;span style="color:#3677a9">-3-2&lt;/span>-deployment-methods-github-actions/&lt;span style="color:#666">
&lt;/span>&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#999;font-style:italic"># ...&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>---&lt;/code>&lt;/pre>&lt;/div>
&lt;p>You can read more about how &lt;code>aliases&lt;/code> does its operations &lt;a href="https://gohugo.io/content-management/urls/#aliases">here&lt;/a>.&lt;/p>
&lt;h3 id="from-blogs-to-blog">From Blogs to Blog&lt;/h3>
&lt;p>Earlier on, we came across this weird bug&amp;hellip;&lt;/p>
&lt;figure>
&lt;img src="blogs-landing-page.png"
alt="Screenshot of Blog landing page with incorrect Blogs title"/>
&lt;/figure>
&lt;p>This is occurring because of the translation feature of Hugo (sourced from &lt;a href="https://gohugo.io/functions/i18n/">i18n&lt;/a>) which converts singular word titles to plural on content section landing pages, since Hugo is listing them out. This made sense when our previous section name was posts, but now we&amp;rsquo;d rather it have say blog.&lt;/p>
&lt;p>Remembering that &lt;code>content/blog&lt;/code> is a &lt;a href="https://gohugo.io/content-management/page-bundles/#branch-bundles">branch bundle&lt;/a>, we can override the inferred title with a &lt;code>_index.md&lt;/code> file at that directory.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># content/blog/_index.md&lt;/span>
---
title: Blog
type: posts
---
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We have another &lt;code>type: posts&lt;/code> setting here because similar to above, we want Hugo to render the landing page the same as we did for posts.&lt;/p>
&lt;h3 id="heading-to-blog">Heading to Blog&lt;/h3>
&lt;p>Lastly and most easily, the &lt;strong>Blog&lt;/strong> shortcut at the top-right corner of the page still directs us to &lt;code>/posts&lt;/code> - we need to change that in the top-level &lt;code>config.toml&lt;/code> to point to &lt;code>/blog&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-toml" data-lang="toml">[[languages.en.menu.main]]
name = &lt;span style="color:#ed9d13">&amp;#34;Blog&amp;#34;&lt;/span>
weight = &lt;span style="color:#3677a9">2&lt;/span>
url = &lt;span style="color:#ed9d13">&amp;#34;/blog/&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Thanks for reading!&lt;/p></description></item><item><title>Who Goes Blogging 3.2: Deployment Methods - GitHub Actions</title><link>https://jdheyburn.co.uk/blog/who-goes-blogging-3-2-deployment-methods-github-actions/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/who-goes-blogging-3-2-deployment-methods-github-actions/</guid><description>&lt;h2 id="from-travisci-to-github-actions">From TravisCI to GitHub Actions&lt;/h2>
&lt;p>In the &lt;a href="https://jdheyburn.co.uk/posts/who-goes-blogging-3-1-deployment-methods-travisci/">previous post&lt;/a> we looked at moving to a CI/CD model by moving from the &lt;code>deploy.sh&lt;/code> script to TravisCI.&lt;/p>
&lt;p>In this post we will look at how we can migrate from TravisCI to &lt;a href="https://help.github.com/en/actions/getting-started-with-github-actions/about-github-actions">GitHub Actions&lt;/a>, GitHub&amp;rsquo;s own CI/CD tool.&lt;/p>
&lt;p>This post will also be useful if you are looking to onboard GitHub Actions as your CI/CD pipeline! 🚀&lt;/p>
&lt;h3 id="benefits-">Benefits ✅&lt;/h3>
&lt;p>Let&amp;rsquo;s talk about why we want to migrate away from TravisCI in the first place.&lt;/p>
&lt;p>&lt;strong>Firstly and most importantly&lt;/strong>, there is a whole community of shared actions (a set of build instructions) which can save you a &lt;em>huge&lt;/em> amount of time when it comes to piecing together a CI pipeline. If the TravisCI config seemed a bit intimidating, then these will be a whole lot more gentler to you.&lt;/p>
&lt;p>Whereas in our Travis config we had to define the individual commands needed to set up our environment and then how to build it, there&amp;rsquo;s an &lt;a href="https://github.com/marketplace/actions/hugo-setup">action&lt;/a> for that! Want to include some markdown linting? There&amp;rsquo;s an &lt;a href="https://github.com/marketplace/actions/markdownlint-cli">action&lt;/a> for that!&lt;/p>
&lt;p>I think you folks get the picture now. There&amp;rsquo;s an &lt;a href="https://github.com/sdras/awesome-actions">awesome-actions&lt;/a> repository worth checking out for more actions.&lt;/p>
&lt;p>&lt;strong>Secondly&lt;/strong>, all your DevOps tools are in one place! I&amp;rsquo;m a big sucker for &lt;a href="https://about.gitlab.com/">GitLab&lt;/a> and while I don&amp;rsquo;t use it for my personal projects, I&amp;rsquo;ve used it in a past life and found its seamless integration with all other tools second-to-none. Not having to worry about integrating between multiple services can only increase your productivity - allowing you to focus more on the application you&amp;rsquo;re writing.&lt;/p>
&lt;p>&lt;strong>Lastly&lt;/strong>, all configuration is managed in the workflow configuration file. One enhancement in particular that we will be introducing can be achieved with an additional setting in the workflow config file; for us to achieve the same in Travis would have to be done via the GUI. I&amp;rsquo;m a big sucker for having configuration baked into code so this is a very good plus.&lt;/p>
&lt;h3 id="pricing-">Pricing ⏰&lt;/h3>
&lt;p>&lt;strong>However&lt;/strong> - one downsides to GitHub Actions is how many build minutes you get. Remember Travis allowed unlimited build minutes for a public repository? With Actions - you are limited to &lt;a href="https://github.com/pricing">2,000 minutes in their free plan&lt;/a>.&lt;/p>
&lt;p>If you&amp;rsquo;ve been building your project in Travis already, you&amp;rsquo;ll notice it has been building (in my case at least) in ~30 seconds. With a bit of maths we can then say we will have 4,000 builds in a month on GitHub Actions.&lt;/p>
&lt;p>Given that this isn&amp;rsquo;t a huge project with multiple contributors working on it, I think it&amp;rsquo;s safe to say we won&amp;rsquo;t ever reach this limit - unless you&amp;rsquo;re churning out blog posts left right and centre!&lt;/p>
&lt;p>Sound good? Let&amp;rsquo;s go.&lt;/p>
&lt;h2 id="creating-our-workflow">Creating Our Workflow&lt;/h2>
&lt;p>Like all great services in the world, there is &lt;a href="https://help.github.com/en/actions">great documentation&lt;/a> to go along with them. Take a look over there if you&amp;rsquo;d like the detailed version.&lt;/p>
&lt;p>What I will be focusing on is the documentation for two sets of predefined actions; &lt;a href="https://github.com/peaceiris/actions-hugo">actions-hugo&lt;/a> for building our website, and &lt;a href="https://github.com/peaceiris/actions-gh-pages">actions-gh-pages&lt;/a> for deploying it to GitHub Pages.&lt;/p>
&lt;h3 id="deployment-keys-setup">Deployment Keys Setup&lt;/h3>
&lt;p>The very first thing we need to do is set up some keys that will allow our source repository (where the workflow will reside on) to push the built project to the GitHub Pages repo.&lt;/p>
&lt;p>In your terminal, create those keys now and copy the contents of the public key to your clipboard.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ssh-keygen -t rsa -b &lt;span style="color:#3677a9">4096&lt;/span> -C &lt;span style="color:#ed9d13">&amp;#34;&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">$(&lt;/span>git config user.email&lt;span style="color:#6ab825;font-weight:bold">)&lt;/span>&lt;span style="color:#ed9d13">&amp;#34;&lt;/span> -f ~/.ssh/gh-pages -N &lt;span style="color:#ed9d13">&amp;#34;&amp;#34;&lt;/span>
Generating public/private rsa key pair.
Your identification has been saved in /home/jdheyburn/.ssh/gh-pages.
Your public key has been saved in /home/jdheyburn/.ssh/gh-pages.pub
&lt;span style="color:#999;font-style:italic"># ...&lt;/span>
$ pbcopy &amp;lt; ~/.ssh/gh-pages.pub
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>macOS has a handy terminal command to copy file contents to the clipboard called &lt;code>pbcopy&lt;/code>. I&amp;rsquo;ve created an alias on my Linux laptop that does the same.&lt;/p>
&lt;p>&lt;code>alias pbcopy=&amp;quot;xclip -selection clipboard&amp;quot;&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>In GitHub load up your GitHub Pages repo and navigate to &lt;code>Settings&lt;/code> and then &lt;code>Deploy keys&lt;/code>. Give it an appropriate name, and paste in the public key. Make sure you check &lt;code>Allow write access&lt;/code>.&lt;/p>
&lt;figure>
&lt;img src="gha-deploy-key.png"
alt="GitHub Pages repo deploy keys page"/>
&lt;/figure>
&lt;p>Copy the contents of the &lt;em>private key&lt;/em> you created earlier (perhaps using your new command?! 😏) and navigate to the source code repository&amp;rsquo;s &lt;code>Settings&lt;/code> page, then &lt;code>Secrets&lt;/code>. You&amp;rsquo;ll need to give it a sensible name as this then referred to later in the workflow configuration. Paste the private key in the value field.&lt;/p>
&lt;figure>
&lt;img src="gha-secrets-key.png"
alt="GitHub source code repo secrets page"/> &lt;figcaption>
&lt;p>No secrets here!&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="workflow-configuration">Workflow Configuration&lt;/h3>
&lt;p>In the root directory of your source code repo, create a directory called &lt;code>.github/workflows&lt;/code>. In this directory is where GitHub Actions will look for jobs to do. Create a &lt;code>yml&lt;/code> file in this directory to contain your build job definition. I went ahead and named mine &lt;code>deploy.yml&lt;/code>, but you can name it whatever you like.&lt;/p>
&lt;p>I used the &lt;a href="https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-repository-type---project">example&lt;/a> provided in the &lt;code>actions-gh-pages&lt;/code> documentation as a base for my build definition.&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/jdheyburn/b4b2cad15604de30f21ad0e1a85ee6b9.js">&lt;/script>
&lt;p>This config is much simpler to understand than the Travis one - let&amp;rsquo;s break it down once more.&lt;/p>
&lt;h4 id="build-metadata-and-environment">Build Metadata and Environment&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>Build&lt;span style="color:#666"> &lt;/span>and&lt;span style="color:#666"> &lt;/span>deploy&lt;span style="color:#666"> &lt;/span>to&lt;span style="color:#666"> &lt;/span>jdheyburn.github.io&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">on&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">push&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">branches&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- master&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">schedule&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">cron&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;0 10 * * *&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">jobs&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">deploy&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">runs-on&lt;/span>:&lt;span style="color:#666"> &lt;/span>ubuntu&lt;span style="color:#3677a9">-18.04&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is pretty box standard at this point. We&amp;rsquo;re simply giving the name to the workflow and saying to run it on every push to the &lt;code>master&lt;/code> branch.&lt;/p>
&lt;p>An enhancement that we&amp;rsquo;re adding is the &lt;code>on.schedule.cron&lt;/code> setting. This tells Actions not only to build the project on every push to the &lt;code>master&lt;/code> branch but on a timed schedule too - in my example this is at 10am everyday. We could have done the same via Travis, but that can only be &lt;a href="https://docs.travis-ci.com/user/cron-jobs/">configured via the GUI&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>The benefit to this is the way in which Hugo generates content. Hugo will only build content pages where the date on the content is either today or in the past, and is not a draft.&lt;/p>
&lt;p>Therefore if you had written a post due to be published in the future, you can define that date and have the daily Hugo build publish it when that date has been reached - which is exactly how this blog post was published!&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>jobs&lt;/code> is the field that contains the work we want to run. We&amp;rsquo;re giving the job a name of &lt;code>deploy&lt;/code> and telling it to run on &lt;code>ubuntu-18.04&lt;/code> - which is the equivalent to &lt;code>bionic&lt;/code> in Ubuntu.&lt;/p>
&lt;blockquote>
&lt;p>In order to keep our build the same as Travis&amp;rsquo;s, we could instruct the job to run on &lt;code>ubuntu-16.04&lt;/code>, nonetheless I&amp;rsquo;m pretty confident it will run on the next &lt;a href="https://wiki.ubuntu.com/Releases">LTS of Ubuntu&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h4 id="project-checkout">Project Checkout&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#999;font-style:italic"># ...&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">steps&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">uses&lt;/span>:&lt;span style="color:#666"> &lt;/span>actions/checkout@v2&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>Checkout&lt;span style="color:#666"> &lt;/span>submodules&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">shell&lt;/span>:&lt;span style="color:#666"> &lt;/span>bash&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">run&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">|
&lt;/span>&lt;span style="color:#ed9d13"> auth_header=&amp;#34;$(git config --local --get http.https://github.com/.extraheader)&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>git&lt;span style="color:#666"> &lt;/span>submodule&lt;span style="color:#666"> &lt;/span>sync&lt;span style="color:#666"> &lt;/span>--recursive&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>git&lt;span style="color:#666"> &lt;/span>-c&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;http.extraheader=$auth_header&amp;#34;&lt;/span>&lt;span style="color:#666"> &lt;/span>-c&lt;span style="color:#666"> &lt;/span>protocol.version=&lt;span style="color:#3677a9">2&lt;/span>&lt;span style="color:#666"> &lt;/span>submodule&lt;span style="color:#666"> &lt;/span>update&lt;span style="color:#666"> &lt;/span>--init&lt;span style="color:#666"> &lt;/span>--force&lt;span style="color:#666"> &lt;/span>--recursive&lt;span style="color:#666"> &lt;/span>--depth=&lt;span style="color:#3677a9">1&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we&amp;rsquo;re executing the GitHub &lt;a href="https://github.com/actions/checkout">checkout action&lt;/a> which will pull the repo to the build server. It&amp;rsquo;s worth noting that this action version I&amp;rsquo;m using here doesn&amp;rsquo;t checkout git submodules too - which is a problem for us as that&amp;rsquo;s how we&amp;rsquo;re currently pulling the theme for our Hugo site. We can workaround it with the next step in the build - &lt;code>Checkout submodules&lt;/code>.&lt;/p>
&lt;p>This functionality was available in v1 of the action, so you can use that if you&amp;rsquo;d prefer:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#6ab825;font-weight:bold">steps&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- &lt;span style="color:#6ab825;font-weight:bold">uses&lt;/span>:&lt;span style="color:#666"> &lt;/span>actions/checkout@v2&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">with&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">submodules&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>It&amp;rsquo;s worth noting that we didn&amp;rsquo;t have to do this step for Travis - since it will checkout the repository with submodules already.&lt;/p>
&lt;p>This is because GitHub Actions can be used for many more things than just repository code manipulation where you may not necessarily need the repo checked out.&lt;/p>
&lt;/blockquote>
&lt;h4 id="build-and-deploy-setup">Build and Deploy Setup&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>Setup&lt;span style="color:#666"> &lt;/span>Hugo&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">uses&lt;/span>:&lt;span style="color:#666"> &lt;/span>peaceiris/actions-hugo@v2&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">with&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">hugo-version&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;0.58.3&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">extended&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As stated we&amp;rsquo;re going to be using the Action &lt;a href="https://github.com/peaceiris/actions-hugo">actions-hugo&lt;/a> to set up &lt;code>hugo&lt;/code> on our build server. It can take in a number of parameters to allow us to customise it; for us we&amp;rsquo;re only concerned with hardcoding the version of Hugo, and to use the Hugo Extended binary as required by our theme.&lt;/p>
&lt;blockquote>
&lt;p>At the time of writing 0.58.3 is not the latest version of Hugo, whereas when I wrote &lt;code>.travis.yml&lt;/code> it was. I want the GitHub Actions build to be as close as possible to the TravisCI build in order to make them as similar as possible to prevent any unexpected build errors.&lt;/p>
&lt;p>Once I&amp;rsquo;ve achieved a successful build - I&amp;rsquo;ll look to upgrade to a newer version, and then iron out any issues from there.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>Build&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">run&lt;/span>:&lt;span style="color:#666"> &lt;/span>hugo&lt;span style="color:#666"> &lt;/span>--gc&lt;span style="color:#666"> &lt;/span>--minify&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once &lt;code>hugo&lt;/code> is set up we can then build it easily enough, as self-documented in the code.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>Copy&lt;span style="color:#666"> &lt;/span>CNAME&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">run&lt;/span>:&lt;span style="color:#666"> &lt;/span>cp&lt;span style="color:#666"> &lt;/span>CNAME&lt;span style="color:#666"> &lt;/span>./public/&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lastly, we can&amp;rsquo;t forget to copy the &lt;code>CNAME&lt;/code> file we made in &lt;a href="https://jdheyburn.co.uk/posts/who-goes-blogging-2-custom-domain/#solidying-our-changes-with-a-cname-file">part 2&lt;/a>.&lt;/p>
&lt;h4 id="deployment-to-github-pages">Deployment to GitHub Pages&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">- &lt;span style="color:#6ab825;font-weight:bold">name&lt;/span>:&lt;span style="color:#666"> &lt;/span>Deploy&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">uses&lt;/span>:&lt;span style="color:#666"> &lt;/span>peaceiris/actions-gh-pages@v3&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">with&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">deploy_key&lt;/span>:&lt;span style="color:#666"> &lt;/span>${{&lt;span style="color:#666"> &lt;/span>secrets.DEPLOY_KEY&lt;span style="color:#666"> &lt;/span>}}&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">external_repository&lt;/span>:&lt;span style="color:#666"> &lt;/span>jdheyburn/jdheyburn.github.io&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">publish_branch&lt;/span>:&lt;span style="color:#666"> &lt;/span>master&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">publish_dir&lt;/span>:&lt;span style="color:#666"> &lt;/span>./public&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">commit_message&lt;/span>:&lt;span style="color:#666"> &lt;/span>${{&lt;span style="color:#666"> &lt;/span>github.event.head_commit.message&lt;span style="color:#666"> &lt;/span>}}&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For the deployment to GitHub Pages I&amp;rsquo;m using the action &lt;a href="https://github.com/peaceiris/actions-gh-pages">actions-gh-pages&lt;/a>. Again it only requires a bare minimum of parameters to work; an explanation of what I&amp;rsquo;m using is:&lt;/p>
&lt;ul>
&lt;li>&lt;code>deploy_key&lt;/code> is the &lt;em>private key&lt;/em> we set up &lt;a href="#deployment-keys-setup">earlier in this post&lt;/a> in &lt;code>Settings&lt;/code> -&amp;gt; &lt;code>Secrets&lt;/code>
&lt;ul>
&lt;li>If you didn&amp;rsquo;t name yours &lt;code>DEPLOY_KEY&lt;/code> then you&amp;rsquo;ll need to change it here too.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>external_repository&lt;/code> tells the action where we want the built website to go to - we set this to our GitHub Pages repo&lt;/li>
&lt;li>&lt;code>publish_branch&lt;/code> is the branch of the repo we publish to&lt;/li>
&lt;li>&lt;code>publish_dir&lt;/code> is the directory on the build server that we want to push to the repo
&lt;ul>
&lt;li>Remember that &lt;code>hugo&lt;/code> builds the website to the &lt;code>public&lt;/code> directory locally&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>commit_message&lt;/code> allows us to specify a custom commit message to the target repo
&lt;ul>
&lt;li>Here I am telling it to inherit the commit message used in the source repo&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="bringing-it-all-together-again">Bringing It All Together (Again)&lt;/h2>
&lt;p>If you&amp;rsquo;re migrating from a previous CI tool (perhaps Travis?) then you&amp;rsquo;ll need to disable the builds on there since you may cause a conflict either build process.&lt;/p>
&lt;p>For Travis, you can do that by navigating to your source code repo settings on Travis (&lt;a href="https://travis-ci.com/jdheyburn/jdheyburn.co.uk/settings">https://travis-ci.com/jdheyburn/jdheyburn.co.uk/settings&lt;/a> for me) and disabling &lt;code>Build pushed branches&lt;/code>.&lt;/p>
&lt;figure class="center">
&lt;img src="travis-disable-build.png"
alt="Build pushed branches disabled on Travis"/>
&lt;/figure>
&lt;p>Now that&amp;rsquo;s done, go ahead and check in your new GitHub Actions workflow file and then navigate to the &lt;code>Actions&lt;/code> tab of your source code repo on GitHub.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git add --all
git commit -m &lt;span style="color:#ed9d13">&amp;#39;Migrate to GitHub Actions&amp;#39;&lt;/span>
git push
&lt;/code>&lt;/pre>&lt;/div>&lt;figure>
&lt;img src="github-actions-build.png"
alt="Successful build on GitHub Actions"/> &lt;figcaption>
&lt;p>Great success!&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Hopefully your build went to success! If it didn&amp;rsquo;t have a look through the logs and see what the issue was. It took me a few builds to determine my finalised workflow config. You can even see it at my &lt;a href="https://github.com/jdheyburn/jdheyburn.co.uk/actions">source code repo Actions page&lt;/a>.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Now that we&amp;rsquo;ve migrated across over to GitHub Actions, we can close out the permissions that TravisCI has on our projects, and demise any secret keys we gave it.&lt;/p>
&lt;p>From the tone of my writing you can probably tell which one I favour. That&amp;rsquo;s not to say I do not like TravisCI - each service has its own pros and cons. For this particular project, I prefer the one platform approach for which I am used to in GitLab. The number of build minutes available for GA is a concern, but not one I will have to worry about for now.&lt;/p>
&lt;p>Thanks for reading! 🌝&lt;/p></description></item><item><title>Who Goes Blogging 3.1: Deployment Methods - TravisCI</title><link>https://jdheyburn.co.uk/blog/who-goes-blogging-3-1-deployment-methods-travisci/</link><pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/who-goes-blogging-3-1-deployment-methods-travisci/</guid><description>&lt;h2 id="recap">Recap&lt;/h2>
&lt;p>Since &lt;a href="https://jdheyburn.co.uk/posts/who-goes-blogging-1-getting-started/">part 1&lt;/a>, we have been using a simple bash script called &lt;code>deploy.sh&lt;/code> to build our Hugo website and upload it to our GitHub Pages repo. In &lt;a href="https://jdheyburn.co.uk/posts/who-goes-blogging-2-custom-domain/">part 2&lt;/a> we modified it slightly to include the &lt;code>CNAME&lt;/code> file post-build to ensure GitHub Pages uses the custom domain we set up in that same part.&lt;/p>
&lt;p>For this part, I will tell you about how I migrated from deploying via a script, to a CI/CD tool - namely &lt;a href="https://travis-ci.com/">TravisCI&lt;/a>. Then I will document how I migrated from this, to the new &lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a>; GitHub&amp;rsquo;s offering into the CI/CD space.&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>CI/CD&lt;/code> is an acronym for Continuous Integration / Continuous Deployment which is a very important concept in the DevOps culture.
If you would like to find out more about that and DevOps culture, check out these resources 👇&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.atlassian.com/devops">https://www.atlassian.com/devops&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/faun/the-basics-of-continuous-integration-delivery-with-10-most-popular-tools-to-use-9514231533f0">https://medium.com/faun/the-basics-of-continuous-integration-delivery-with-10-most-popular-tools-to-use-9514231533f0&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.redhat.com/en/topics/devops/what-is-ci-cd">https://www.redhat.com/en/topics/devops/what-is-ci-cd&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.atlassian.com/devops">https://www.atlassian.com/devops&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.amazon.co.uk/dp/B07B9F83WM">https://www.amazon.co.uk/dp/B07B9F83WM&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>I had originally planned this to be one post, but it soon became far too long - and I&amp;rsquo;m a fan of taking in content in sizeable chunks.&lt;/p>
&lt;p>So this post will focus on migrating to TravisCI from the &lt;code>deploy.sh&lt;/code> script. Whereas the next post will focus on migrating to, and setting up GitHub Actions. If you&amp;rsquo;re only interested in using that as your CI tool then I&amp;rsquo;ll provide a link to that here when it is posted.&lt;/p>
&lt;h2 id="moving-away-from-deploysh">Moving Away From deploy.sh&lt;/h2>
&lt;p>There&amp;rsquo;s nothing necessarily wrong with using &lt;code>deploy.sh&lt;/code> to push our code, however we want to get all the bells and whistles that Continuous Integration can provide to us such as running a series of tests and checks automatically against every commit to our repository. Once those tests and checks pass then we can automate the deployment of our website.&lt;/p>
&lt;p>Now there are many CI tools out there with the most well known likely to be &lt;a href="https://jenkins.io/">Jenkins&lt;/a>, but there are also hosted solutions available which will take your code and perform your pipelines against them.&lt;/p>
&lt;p>One of those hosted solutions is &lt;a href="https://travis-ci.com/">TravisCI&lt;/a>, where they integrate quite nicely with GitHub repositories to attach &lt;a href="https://developer.github.com/webhooks/">webhooks&lt;/a> against them. They have several pricing options available, but for public open source projects, it is completely free!&lt;/p>
&lt;p>So it is a good idea to set your source code repository on GitHub to be public. TravisCI does include (at the time of writing) private projects in their free plan, but you are capped in some shape or form on how much the platform will do for you.&lt;/p>
&lt;figure>
&lt;img src="travis-free.png"
alt="Screenshot of Travis free pricing plan"/> &lt;figcaption>
&lt;p>Free is definitely a thing you love to see&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="travisci-account-setup">TravisCI Account Setup&lt;/h2>
&lt;p>The TravisCI account setup for TravisCI is very streamlined - instead of creating &lt;em>another&lt;/em> account for you to manage, it integrates in with GitHub, so this is the account you use to sign-up with. Head over to &lt;a href="https://travis-ci.com/">https://travis-ci.com/&lt;/a> and click on &lt;code>Sign in with GitHub&lt;/code>.&lt;/p>
&lt;figure>
&lt;img src="travis-landing.png"
alt="Screenshot of Travis landing page"/> &lt;figcaption>
&lt;p>You can&amp;rsquo;t resist a big green button&amp;hellip;&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>GitHub will ask you if you &lt;em>really&lt;/em> want to share some of your GitHub data with Travis.&lt;/p>
&lt;figure class="center">
&lt;img src="travis-github-authorise.png"
alt="Screenshot of GitHub authorising Travis"/> &lt;figcaption>
&lt;p>Another green button? Why not!&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Once you&amp;rsquo;ve done that, you&amp;rsquo;ll be redirected to your new Travis Dashboard which&amp;hellip; is looking rather lonely 😦 - let&amp;rsquo;s fix that!&lt;/p>
&lt;p>All we&amp;rsquo;ve done so far is allowed Travis to reach GitHub for creating an account for us - we now need to activate GitHub Apps integration to permit it to read and write to our repositories. The &lt;a href="https://travis-ci.com/account/repositories">https://travis-ci.com/account/repositories&lt;/a> page is what you need for that - then click on the &lt;code>Activate&lt;/code> button.&lt;/p>
&lt;figure>
&lt;img src="travis-github-apps-integration.png"
alt="Screenshot of GitHub Apps Integration"/> &lt;figcaption>
&lt;p>&amp;hellip;More green buttons?!&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Now on the next screen you may or may not want the default selection of &lt;code>All repositories&lt;/code> which will give Travis read and write access to all your repos. I completely trust Travis if I were to select this, however it is a best practice to follow the &lt;a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege">&lt;em>principle of least privilege&lt;/em>&lt;/a> (POLP); not just for users but for services too.&lt;/p>
&lt;p>For the scope of this effort we&amp;rsquo;re only wanting Travis to read and manipulate against two repos, &lt;code>jdheyburn.co.uk&lt;/code> and &lt;code>jdheyburn.github.io&lt;/code> - it also gives you a cleaner Travis dashboard too.&lt;/p>
&lt;figure class="center">
&lt;img src="travis-github-repos-selection.png"
alt="Screenshot of GitHub Travis Repository Authorisation"/>
&lt;/figure>
&lt;h3 id="back-to-github">Back to GitHub&lt;/h3>
&lt;p>The next step is required to permit Travis to push the built project to our GitHub Pages repo. We need to generate a secret with the permissions that Travis requires and keep it aside for the Travis config file later.&lt;/p>
&lt;p>Navigate to the &lt;a href="https://github.com/settings/tokens">GitHub Personal Access Tokens&lt;/a> page and click on &lt;code>Generate new token&lt;/code>.&lt;/p>
&lt;p>You&amp;rsquo;ll come across a page asking for the name of the token being created. It doesn&amp;rsquo;t matter what you call it, but it may be useful to link it back to what it is being used for. You&amp;rsquo;re also going to want to select the &lt;code>repo&lt;/code> checkbox as done so below.&lt;/p>
&lt;p>After this you don&amp;rsquo;t need to provide any more permissions to the token. Scroll down to the end of the page and click &lt;code>Generate token&lt;/code>.&lt;/p>
&lt;figure class="center">
&lt;img src="travis-github-pat.png"
alt="Screenshot of GitHub Personal Access Token Creation - repos is checked"/>
&lt;/figure>
&lt;p>The token&amp;rsquo;s secret will display on the next screen. &lt;strong>Make sure you copy it&lt;/strong> and place it somewhere you can refer back to it later such as a text editor like Notepad - we&amp;rsquo;ll need it again in the next section.&lt;/p>
&lt;figure class="center">
&lt;img src="travis-github-pat-created.png"
alt="Screenshot of GitHub Personal Access Token Creation - token complete"/>
&lt;/figure>
&lt;h2 id="travisci-configuration">TravisCI Configuration&lt;/h2>
&lt;p>Once we have our Travis account set up, we need to add in a &lt;a href="https://docs.travis-ci.com/user/tutorial/">configuration file&lt;/a> that Travis will read from to determine what steps we&amp;rsquo;d like it to perform.&lt;/p>
&lt;p>In our source code repository (&lt;code>jdheyburn.co.uk&lt;/code> in my case) we want to create a file at the root directory and call it &lt;code>.travis.yml&lt;/code>. See below for an example of how I configured mine.&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/jdheyburn/073bd6d4cb9284774e7e7feee093d86f.js">&lt;/script>
&lt;p>Let&amp;rsquo;s break it down section by section.&lt;/p>
&lt;h3 id="build-environment">Build Environment&lt;/h3>
&lt;p>These settings here all refer to the build environment that we&amp;rsquo;d like our project to build on.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#6ab825;font-weight:bold">dist&lt;/span>:&lt;span style="color:#666"> &lt;/span>xenial&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">git&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">depth&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">false&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>&lt;span style="color:#6ab825;font-weight:bold">env&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">global&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- HUGO_VERSION=&lt;span style="color:#ed9d13">&amp;#34;0.58.3&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">matrix&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">secure&lt;/span>:&lt;span style="color:#666"> &lt;/span>REDACTED&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>dist&lt;/code> specifies what platform Travis should build the project on. In this case &lt;code>xenial&lt;/code> refers to Ubuntu 16.04, which is a Linux distribution. There are &lt;a href="https://docs.travis-ci.com/user/reference/overview/">several others&lt;/a> to choose from and more likely than not you&amp;rsquo;ll want the platform to be Linux. However if you had a Windows application written in &lt;code>.NET&lt;/code> then you would likely want it built on a Windows Server since that is what supports it.&lt;/p>
&lt;p>&lt;code>git.depth&lt;/code> tells Travis how many commits of your project to check out. This is passed directory to the &lt;code>git&lt;/code> parameter &lt;code>--depth&lt;/code> (more info on that &lt;a href="https://git-scm.com/docs/git-clone">here&lt;/a>). For our use case we&amp;rsquo;re not interested in this option so we set it to &lt;code>false&lt;/code> to disable the flag being passed to &lt;code>git&lt;/code>.&lt;/p>
&lt;p>&lt;code>env.global&lt;/code> allows us to define what variables should be set in the environment. This is done in the form of an array of strings in the format &lt;code>key=value&lt;/code>. So given the example, &lt;code>HUGO_VERSION&lt;/code> will be set to &lt;code>0.58.3&lt;/code>. We&amp;rsquo;ll come back to this later.&lt;/p>
&lt;p>&lt;code>env.matrix&lt;/code> is the encrypted value that gets passed to the &lt;code>GITHUB_TOKEN&lt;/code> environment variable which is used to allow Travis to commit the built project to our GitHub Pages repo.&lt;/p>
&lt;ul>
&lt;li>You&amp;rsquo;re going to want to take the personal access token generated from GitHub in the earlier step and encrypt it using &lt;a href="https://docs.travis-ci.com/user/environment-variables#encrypting-environment-variables">this method&lt;/a>, then add it back to this setting&lt;/li>
&lt;/ul>
&lt;h3 id="external-dependencies">External Dependencies&lt;/h3>
&lt;p>Once the build environment is defined, we can tell Travis to pull in some additional dependencies or files required for our project. Now remember this is a &lt;code>hugo&lt;/code> project and we needed to install it on our local machines to run &lt;code>deploy.sh&lt;/code>, we need to do the same for Travis too.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#6ab825;font-weight:bold">install&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- wget&lt;span style="color:#666"> &lt;/span>-q&lt;span style="color:#666"> &lt;/span>https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_Linux-64bit.tar.gz&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- tar&lt;span style="color:#666"> &lt;/span>xf&lt;span style="color:#666"> &lt;/span>hugo_extended_${HUGO_VERSION}_Linux-64bit.tar.gz&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- mv&lt;span style="color:#666"> &lt;/span>hugo&lt;span style="color:#666"> &lt;/span>~/bin/&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remember we defined &lt;code>HUGO_VERSION&lt;/code> earlier? This is where it is called back again. In order, the steps we&amp;rsquo;re performing are:&lt;/p>
&lt;ol>
&lt;li>Downloading the archive containing the specified &lt;code>hugo&lt;/code> version&lt;/li>
&lt;li>Extracting all contents of the archive&lt;/li>
&lt;li>Moving the &lt;code>hugo&lt;/code> binary to the &lt;code>~/bin/&lt;/code> directory
&lt;ul>
&lt;li>This directory is on the build servers &lt;code>PATH&lt;/code>, which enables us to execute the binary using just the &lt;code>hugo&lt;/code> command later&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="previous-issues">Previous Issues&lt;/h4>
&lt;p>In a previous version of &lt;code>hugo&lt;/code> I used, there was an additional dependency I needed to include. The &lt;code>hugo-coder&lt;/code> theme requires to be built with Hugo Extended since it requires Sass/SCSS support.&lt;/p>
&lt;p>For this particular Hugo Extended version, it required a library which was not included in the build server distribution in the past. On the plus side - Travis allows us to define additional build steps to ensure all required libraries are on the build server beforehand.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#6ab825;font-weight:bold">before_install&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#999;font-style:italic"># This workaround is required to avoid libstdc++ errors while running &amp;#34;extended&amp;#34; hugo with SASS support.&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- wget&lt;span style="color:#666"> &lt;/span>-q&lt;span style="color:#666"> &lt;/span>-O&lt;span style="color:#666"> &lt;/span>libstdc++&lt;span style="color:#3677a9">6&lt;/span>&lt;span style="color:#666"> &lt;/span>http://security.ubuntu.com/ubuntu/pool/main/g/gcc&lt;span style="color:#3677a9">-5&lt;/span>/libstdc++6_5&lt;span style="color:#3677a9">.4.0&lt;/span>-6ubuntu1~&lt;span style="color:#3677a9">16.04&lt;/span>.10_amd64.deb&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>- sudo&lt;span style="color:#666"> &lt;/span>dpkg&lt;span style="color:#666"> &lt;/span>--force-all&lt;span style="color:#666"> &lt;/span>-i&lt;span style="color:#666"> &lt;/span>libstdc++&lt;span style="color:#3677a9">6&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However in later versions of Hugo (including the one I am using today) this dependency is no longer required, hence why it is commented out in &lt;code>.travis.yml&lt;/code>.&lt;/p>
&lt;p>You may not need this stage in your pipeline, I know my project no longer requires it. However this may come in handy later knowing that you have the option of specifying more pipeline steps if the build distribution you&amp;rsquo;re using requires some additional dependencies.&lt;/p>
&lt;h3 id="build-script">Build Script&lt;/h3>
&lt;p>Now onto the juicy stuff - building the project. This is pretty much where the &lt;code>deploy.sh&lt;/code> starts from, since on our local machines we already had the &lt;code>hugo&lt;/code> binary installed.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#6ab825;font-weight:bold">script&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- hugo&lt;span style="color:#666"> &lt;/span>version&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- hugo&lt;span style="color:#666"> &lt;/span>--gc&lt;span style="color:#666"> &lt;/span>--minify&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666">&lt;/span>- cp&lt;span style="color:#666"> &lt;/span>CNAME&lt;span style="color:#666"> &lt;/span>public/&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Not a lot is going on here, but to detail what each step is doing:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Print out the version of &lt;code>hugo&lt;/code> being used&lt;/p>
&lt;ul>
&lt;li>This is helpful for debugging the build. By printing out the version used we can try to replicate the bug locally for troubleshooting.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Build the project&lt;/p>
&lt;ul>
&lt;li>We do this with two flags, &lt;code>--gc&lt;/code> and &lt;code>--minify&lt;/code>. These weren&amp;rsquo;t defined in the &lt;code>deploy.sh&lt;/code> script we used earlier so let&amp;rsquo;s cover them here.
&lt;ul>
&lt;li>&lt;code>--gc&lt;/code> tells &lt;code>hugo&lt;/code> to cleanup some unused cache files after the build
&lt;ul>
&lt;li>This helps keep a tidy environment for the build server.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>--minify&lt;/code> performs &lt;a href="https://en.wikipedia.org/wiki/Minification_(programming)">minification&lt;/a> on your website to reduce the size of the generated content, enabling it to load faster on your users&amp;rsquo; devices
&lt;ul>
&lt;li>Coupled with a CDN like in the &lt;a href="https://jdheyburn.co.uk/posts/who-goes-blogging-2-custom-domain/#adding-our-cdn-layer">previous part&lt;/a>, your website will load almost instantly&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Copy the &lt;code>CNAME&lt;/code> file from the project root to the generated &lt;code>public/&lt;/code> directory.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>This ensures that the custom domain name we set up in the previous part continues to be set in the generated website code that gets pushed to our GitHub Pages repo. &lt;a href="https://jdheyburn.co.uk/posts/who-goes-blogging-2-custom-domain/#building-into-our-deploy-script">See here&lt;/a> for a refresher.&lt;/p>
&lt;blockquote>
&lt;p>This section is effectively the &amp;lsquo;CI&amp;rsquo; part of &amp;lsquo;CI/CD&amp;rsquo;. We could stop here and just use Travis as a build server to determine whether the website is able to be built successfully. Any errors in the pipeline would have resulted in a failed build.&lt;/p>
&lt;p>The next section details the Continuous Deployment, ensuring that on the successful build of a project we deploy it to our production environment.&lt;/p>
&lt;/blockquote>
&lt;h3 id="deploy-to-github-pages">Deploy to GitHub Pages&lt;/h3>
&lt;p>Once the project has been built, we need to push it to the GitHub Pages repository. Travis has &lt;a href="https://docs.travis-ci.com/user/deployment/pages/">good documentation&lt;/a> on this. My setup follows the below:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#6ab825;font-weight:bold">deploy&lt;/span>:&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">provider&lt;/span>:&lt;span style="color:#666"> &lt;/span>pages&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">skip-cleanup&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">github-token&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#ed9d13">&amp;#34;$GITHUB_TOKEN&amp;#34;&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">keep-history&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">local-dir&lt;/span>:&lt;span style="color:#666"> &lt;/span>public&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">repo&lt;/span>:&lt;span style="color:#666"> &lt;/span>jdheyburn/jdheyburn.github.io&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">target-branch&lt;/span>:&lt;span style="color:#666"> &lt;/span>master&lt;span style="color:#666">
&lt;/span>&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">verbose&lt;/span>:&lt;span style="color:#666"> &lt;/span>&lt;span style="color:#6ab825;font-weight:bold">true&lt;/span>&lt;span style="color:#666">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For the last time, let&amp;rsquo;s walk through what each of these is doing.&lt;/p>
&lt;ul>
&lt;li>&lt;code>provider&lt;/code> tells Travis this is a GitHub Pages deployment&lt;/li>
&lt;li>&lt;code>skip-cleanup&lt;/code> set to &lt;code>true&lt;/code>, so that Travis does not delete the build before we&amp;rsquo;ve got the chance to upload it&lt;/li>
&lt;li>&lt;code>github-token&lt;/code> is set to the environment variable &lt;code>$GITHUB_TOKEN&lt;/code> which was set for us earlier on in the build environment.
&lt;ul>
&lt;li>This is passed to the provider so that it has valid credentials to push the code to the GitHub Pages repo.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>keep-history&lt;/code> performs an incremental commit against the project
&lt;ul>
&lt;li>Setting it to &lt;code>true&lt;/code> allows us to view back the changes in the commit history such as &lt;a href="https://github.com/jdheyburn/jdheyburn.github.io/commit/419da0cc71415d0253996b823d4ccf6844db4042">this one&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>local-dir&lt;/code> specifies the directory that should be pushed to the target repo
&lt;ul>
&lt;li>We set it to &lt;code>public&lt;/code> because that is the name of the generated website directory from the previous &lt;code>script&lt;/code> step&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>repo&lt;/code> is the target repo where we should be deploying to&lt;/li>
&lt;li>&lt;code>target-branch&lt;/code> is the branch that we want &lt;code>local-dir&lt;/code> to be pushed to
&lt;ul>
&lt;li>For our setup we are using &lt;code>master&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>verbose&lt;/code> specifies how much detail Travis will log about its deploy activities&lt;/li>
&lt;/ul>
&lt;p>That concludes the configuration section. Remember to change it or add in some other functionality needed for your project and save it to &lt;code>.travis.yml&lt;/code>.&lt;/p>
&lt;h2 id="bringing-it-all-together">Bringing It All Together&lt;/h2>
&lt;p>Now you&amp;rsquo;ve completed your config file, let&amp;rsquo;s check it all in to GitHub.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git add --all
git commit -m &lt;span style="color:#ed9d13">&amp;#39;Adding CI&amp;#39;&lt;/span>
git push
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Travis will automatically detect that a new change has been made against your repo. And with the inclusion of &lt;code>.travis.yml&lt;/code>, it will now work against that file.&lt;/p>
&lt;p>You can view the status of your repository&amp;rsquo;s build by navigating to it from the &lt;a href="https://travis-ci.com/dashboard">dashboard&lt;/a> and clicking on it.&lt;/p>
&lt;p>If any of the commands in the &lt;code>script&lt;/code> section of the config return a &lt;a href="https://en.wikipedia.org/wiki/Exit_status#Shell_and_scripts">nonzero status code&lt;/a>, the build will fail. If this happens then have a look at a build log and investigate the issue. More likely than not someone else has encountered the problem before, so Google is your gatekeeper to solutions!&lt;/p>
&lt;p>Once you&amp;rsquo;ve got a successful build, that means your website has been deployed to the GitHub Pages repo and will be available on the web to view. In a browser you can now view your changes on the website.&lt;/p>
&lt;p>If they aren&amp;rsquo;t there then your browser is most likely caching an older version. By default, websites served by GitHub Pages have a browser cache TTL &lt;a href="https://webapps.stackexchange.com/questions/119286/caching-assets-in-website-served-from-github-pages">set to 10 minutes&lt;/a>. So you can either wait 10 minutes, or clear your browser cache!&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>You&amp;rsquo;re on the way to DevOps masterclass. As mentioned the next post will focus on migrating to GitHub Actions so if you&amp;rsquo;re happy with TravisCI then there&amp;rsquo;s no more you need to do! Go ahead and add other repositories you may have to Travis and build up multiple pipelines 🙌&lt;/p></description></item><item><title>Who Goes Blogging 2: Custom Domain</title><link>https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/</link><pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/</guid><description>&lt;p>In the &lt;a href="https://jdheyburn.co.uk/posts/who-goes-blogging-1-getting-started/">previous post&lt;/a>, we got ourselves up and running with a website generated by Hugo, deployed to GitHub, and hosted by GitHub Pages.&lt;/p>
&lt;p>Now, we&amp;rsquo;re going to add a custom domain to our website so that we hide the &lt;code>&amp;lt;username&amp;gt;.github.io&lt;/code> domain that GitHub Pages is kindly hosting for us for free.&lt;/p>
&lt;p>At the same time, we&amp;rsquo;re going to make our website blazingly fast for users by adding a caching layer with a content distribution network (CDN).&lt;/p>
&lt;p>Lastly, I&amp;rsquo;m going to throw in a bonus guide on how to redirect from multiple top-level domains (TLDs) to one (e.g. &lt;code>&amp;lt;your-domain&amp;gt;.com&lt;/code> redirects to &lt;code>&amp;lt;your-domain&amp;gt;.co.uk&lt;/code>).&lt;/p>
&lt;h2 id="pre-requisites">Pre-requisites&lt;/h2>
&lt;p>There&amp;rsquo;s not much more to add from the last post. I talk a lot about domains and domain name system (DNS), which is the address-finder of the Internet, and an entirely huge beast in its own right.&lt;/p>
&lt;p>Again - I won&amp;rsquo;t try to replicate already great guides out there on the topic. So if you&amp;rsquo;d like to find out more, see below for some helpful guides.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts">https://www.digitalocean.com/community/tutorials/an-introduction-to-dns-terminology-components-and-concepts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://opensource.com/article/17/4/introduction-domain-name-system-dns">https://opensource.com/article/17/4/introduction-domain-name-system-dns&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="applying-a-custom-domain-to-github-pages">Applying a Custom Domain to GitHub Pages&lt;/h2>
&lt;p>Let&amp;rsquo;s add a degree of professionalism to our site by having a custom domain apply to it. You&amp;rsquo;ll need to make sure you own a domain first before you go ahead, so have a look at a few providers and see which works best for you &lt;a href="https://www.techradar.com/uk/news/best-domain-registrars-in-2019">from a comparison list&lt;/a>. I bought mine from &lt;a href="https://www.namecheap.com/">namecheap&lt;/a> just because of the price and WhoisGuard features. There may be other providers that have the same features, so make sure to make your own comparison!&lt;/p>
&lt;blockquote>
&lt;p>In the case of &lt;code>.co.uk&lt;/code> domains, because it is a UK domain that resides in the EU (for now), the WhoIS lookup is disabled by default - which is a huge win for privacy. WhoisGuard is available for non-EU domains and I highly recommend it.&lt;/p>
&lt;/blockquote>
&lt;p>GitHub has a &lt;a href="https://help.github.com/en/github/working-with-github-pages/configuring-a-custom-domain-for-your-github-pages-site">series of documentation&lt;/a> on applying a custom domain to GitHub Pages in much greater detail than what I am about to write out, should you wish to find out more information.&lt;/p>
&lt;h2 id="acquire-a-domain">Acquire a Domain&lt;/h2>
&lt;p>The rest of the post will depict a lot of Namecheap semantics, since that is the registrar I have access to. You can choose to follow the guide alongside a different registrar if you wish, at a high-level they will be pretty similar. For now, let&amp;rsquo;s move on ahead with Namecheap and navigate through to the &lt;a href="https://www.namecheap.com/">domain purchase page&lt;/a>.&lt;/p>
&lt;figure>
&lt;img src="namecheap_landing.png"
alt="Screenshot depicting the namecheap domain landing page"/> &lt;figcaption>
&lt;p>The hardest part is deciding on the domain name&amp;hellip;&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;figure>
&lt;img src="namecheap-domain-purchase.png"
alt="Screenshot depicting the namecheap domain purchase page"/>
&lt;/figure>
&lt;p>Once you&amp;rsquo;ve set up an account and purchased your domain, your accounts domain landing page will look something like the below.&lt;/p>
&lt;figure>
&lt;img src="namecheap-domain-acquired.png"
alt="Screenshot depicting the namecheap domain landing page"/> &lt;figcaption>
&lt;p>Make sure you have auto-renew selected, otherwise you can kiss that domain goodbye when it expires!&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>When you purchase a domain from Namecheap, by default it will be pointing to their own domain name service (DNS) nameservers, as you can see from the picture above.&lt;/p>
&lt;p>This means when we type in our new domain into a browser, it will contact Namecheap for the IP address for that record.&lt;/p>
&lt;p>Currently Namecheap is none the wiser about these records, which isn&amp;rsquo;t very exciting. Let&amp;rsquo;s move on to adding the CDN for the website.&lt;/p>
&lt;h2 id="adding-our-cdn-layer">Adding Our CDN Layer&lt;/h2>
&lt;p>As discussed in a &lt;a href="https://jdheyburn.co.uk/posts/who-goes-blogging-0-applying-cartography/#supercharge-your-delivery">previous post&lt;/a>, a CDN can provide us with many benefits. Go check out the page for a refresher of what those are and for why I selected Cloudflare. You can use whichever you like, however the remainder of this guide will focus on Cloudflare in particular - the concepts can still be applied at a high level to other CDNs.&lt;/p>
&lt;blockquote>
&lt;p>Like with any introduction of an architectural component, a CDN has some drawbacks, such as making your service now dependent on a third party for which you have no control over. Namely Cloudflare in particular has had some high profile outages of recent date, but has been extremely reliable in my previous experiences with them.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>You can go &lt;a href="https://blog.webnames.ca/advantages-and-disadvantages-of-a-content-delivery-network/">here&lt;/a> for a list of pros and cons of CDNs. Given this information I believe you can make your own mind up on what is best for yourself. For me, I the benefits far outweigh the downsides.&lt;/p>
&lt;/blockquote>
&lt;h3 id="cloudflare-our-domain">Cloudflare our Domain&lt;/h3>
&lt;p>Create an account with &lt;a href="https://www.cloudflare.com/">Cloudflare&lt;/a> if you haven&amp;rsquo;t done so already. Once done you&amp;rsquo;ll need to click &lt;strong>Add Site&lt;/strong> at the top of the browser dashboard. Enter your newly purchased domain from the previous section.&lt;/p>
&lt;figure>
&lt;img src="cloudflare-add-domain.png"
alt="Screenshot depicting the Cloudflare add domain page"/> &lt;figcaption>
&lt;p>Enter your newly purchased domain from the previous section&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Go ahead now and select the free plan, if you want to &lt;a href="https://www.cloudflare.com/en-gb/plans/">go more advanced&lt;/a> then you can do so.&lt;/p>
&lt;p>Once that&amp;rsquo;s created you&amp;rsquo;ll see Cloudflare scan the DNS records for this domain you&amp;rsquo;ve added - for now let&amp;rsquo;s navigate back to the &lt;a href="https://dash.cloudflare.com/">Cloudflare Dashboard&lt;/a> and selecting the domain. You&amp;rsquo;ll be presented with a page similar to below, minus all the activity!&lt;/p>
&lt;figure>
&lt;img src="cloudflare-domain-landing.png"
alt="Screenshot depicting the Cloudflare domain home page"/> &lt;figcaption>
&lt;p>Name me a more iconic duo than numbers and graphs. I&amp;rsquo;ll wait&amp;hellip;&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="update-cloudflare-dns-records">Update Cloudflare DNS Records&lt;/h3>
&lt;p>In order for Cloudflare to provide its benefits, it acts as the DNS server for your domain. This means that it will forward requests of our website to the IP addresses where our website is being hosted. It&amp;rsquo;s place in the topology is like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">1. Domain registrar ---&amp;gt; 2. DNS server and CDN provider ---&amp;gt; 3. Web server location
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Translated to our architecture:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">1. Namecheap ---&amp;gt; 2. Cloudflare ---&amp;gt; 3. GitHub Pages
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What we need to do is instruct Cloudflare where to direct clients of the website. There are several ways of doing this, whether you want your website to be available at &lt;code>www.&amp;lt;your-domain&amp;gt;.co.uk&lt;/code> (CNAME record), or &lt;code>&amp;lt;your-domain&amp;gt;.co.uk&lt;/code> (APEX (A) record). Both of which are &lt;a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site">well documented by GitHub&lt;/a> already. For the purpose of this post, I&amp;rsquo;ll guide you on my set up which is an ALIAS record.&lt;/p>
&lt;p>Back to Cloudflare, you&amp;rsquo;ll need to load up the dashboard for your domain and navigate to the DNS icon in the taskbar at the top. Clicking on &lt;strong>Add record&lt;/strong> will allow you to add the A records that point to GitHub Pages&amp;rsquo;s IP addresses. As of writing (and &lt;a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">documented&lt;/a>) they are:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s add these to the Cloudflare DNS page below.&lt;/p>
&lt;figure>
&lt;img src="cloudflare-dns-record.png"
alt="Screenshot depicting adding DNS records to Cloudflare"/> &lt;figcaption>
&lt;p>Add in the GitHub IP addresses one by one&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Once done - your records will look something like this:&lt;/p>
&lt;figure>
&lt;img src="cloudflare-completed-records.png"
alt="Screenshot depicting completed DNS management"/>
&lt;/figure>
&lt;p>You&amp;rsquo;ll notice an additional CNAME record at the bottom for &lt;code>www&lt;/code>. This will redirect any requests made to &lt;code>www.jdheyburn.co.uk&lt;/code> to &lt;code>jdheyburn.co.uk&lt;/code>. This could be something you&amp;rsquo;d want to replicate too if you wish.&lt;/p>
&lt;p>One thing to note down before we move on is to capture the Cloudflare DNS Nameservers that have been assigned to our domain. You can find these on the same DNS management page we are on, but by just scrolling down we can see these nameservers.&lt;/p>
&lt;figure>
&lt;img src="cloudflare-nameservers.png"
alt="Screenshot depicting completed Cloudflare DNS nameservers"/> &lt;figcaption>
&lt;p>Make a note of these nameservers for your domain&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="direct-namecheap-to-cloudflare">Direct Namecheap to Cloudflare&lt;/h3>
&lt;p>&lt;a href="https://jdheyburn.co.uk/posts/who-goes-blogging-2-custom-domain/#acquire-a-domain">Earlier in this post&lt;/a>, I mentioned that a newly created Namecheap domain will default to their own DNS nameservers. We want to change this to Cloudflares DNS nameservers from which we configured our DNS records.&lt;/p>
&lt;p>Navigate to the &lt;a href="https://ap.www.namecheap.com/domains/list/">Namecheap management page&lt;/a> for your domain and enter the Cloudflare nameservers once you have selected &lt;strong>Custom DNS&lt;/strong>.&lt;/p>
&lt;figure class="center">
&lt;img src="namecheap-nameservers.png"
alt="Screenshot depicting completed nameservers pointing to Cloudflare"/> &lt;figcaption>
&lt;p>Add in your Cloudflare domains from previously&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Once this is done you may need to wait a while for the DNS updates to propagate throughout the world. While we&amp;rsquo;re waiting for that, there&amp;rsquo;s one final piece of the puzzle which can keep us busy.&lt;/p>
&lt;h3 id="github-pages-configuration">GitHub Pages Configuration&lt;/h3>
&lt;p>The last place to configure is GitHub Pages. Currently it is hosting at our &lt;code>.github.io&lt;/code> domain, but we need to instruct it to redirect to our custom domain. There are two methods for doing this:&lt;/p>
&lt;ol>
&lt;li>Configure the repository settings&lt;/li>
&lt;li>Use a &lt;code>CNAME&lt;/code> file in your repository&lt;/li>
&lt;/ol>
&lt;h4 id="configure-the-repository-settings">Configure the repository settings&lt;/h4>
&lt;p>This is the quicker of the two solutions, so I advise to follow this step to understand if you have everything in place correctly. Once done then you can lock-in your changes with step 2 above.&lt;/p>
&lt;p>For this step, you need to navigate to the settings pages for your &lt;code>.github.io&lt;/code> repo containing your rendered code.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">https://github.com/&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io/settings
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now scroll down, keep going until you hit the &lt;strong>GitHub Pages&lt;/strong> heading. Here you will see a form for entering a custom domain; do the honours and enter it in like below.&lt;/p>
&lt;figure>
&lt;img src="github_pages_setup.png"
alt="Screenshot depicting GitHub Pages form for specifying a custom domain"/> &lt;figcaption>
&lt;p>Ignore my already published domain&amp;hellip;&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>Now again wait for DNS to propagate across the world. When GitHub is happy with the changes then you will see the green banner similar to the one in the screenshot above. This means everything is being served up! Why not give it a try ourselves? Head to your domain now and see if everything is working!&lt;/p>
&lt;figure>
&lt;img src="jdheyburn_co_uk_custom_domain.png"
alt="Screenshot depicting completed custom domain"/> &lt;figcaption>
&lt;p>You should end up with something like this!&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;h4 id="solidying-our-changes-with-a-cname-file">Solidying our changes with a CNAME file&lt;/h4>
&lt;p>We can use the above method to quickly try using GitHub repository settings to see if everything is working, however I&amp;rsquo;m a big fan of setting changes in code (Infrastructure-as-code anyone?). GitHub supports another method which is to use a file named &lt;code>CNAME&lt;/code> in our generated &lt;code>.github.io&lt;/code> repo that contains the domain name we wish to use.&lt;/p>
&lt;p>In my case, I would have the following&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># CNAME&lt;/span>
jdheyburn.co.uk
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This then tells a repo that is enabled for GitHub Pages to use the domain in this file as our custom domain, effectively producing the steps in the previous section. Neato.&lt;/p>
&lt;p>The change to implement this is fairly easy. I have to admit I picked it up from somewhere but I don&amp;rsquo;t have the source to reference it to.&lt;/p>
&lt;p>So back in your &lt;code>blog-source&lt;/code> repo, you want to execute the below, replacing the template with your domain.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;&amp;lt;DOMAIN-NAME&amp;gt;&amp;#34;&lt;/span> &amp;gt; CNAME
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="building-into-our-deploy-script">Building into our deploy script&lt;/h4>
&lt;p>Once that is done, you will need to modify your &lt;code>deploy.sh&lt;/code> script to copy over the file into your generated Hugo site, because Hugo won&amp;rsquo;t do it for you! Don&amp;rsquo;t have the deploy script or need a refresher? Head back to the &lt;a href="https://jdheyburn.co.uk/posts/who-goes-blogging-1-getting-started/#bash-script-deploying">previous post&lt;/a>.&lt;/p>
&lt;p>You will want to copy it after Hugo has done its thing, take a look at the Gist below - line 9 is your friend.&lt;/p>
&lt;script type="application/javascript" src="https://gist.github.com/jdheyburn/e84bab9176dc1753416637324a04603d.js">&lt;/script>
&lt;p>What this is doing is taking the &lt;code>CNAME&lt;/code> file that already exists in our &lt;code>blog-source&lt;/code> repo and moving it to the generated &lt;code>public/&lt;/code> directory which Hugo created for us. It is then this &lt;code>public/&lt;/code> directory that gets committed to the GitHub Pages repo.&lt;/p>
&lt;p>Then that&amp;rsquo;s it! Take a look at my &lt;a href="https://github.com/jdheyburn/jdheyburn.github.io">finished repo&lt;/a> and you&amp;rsquo;ll see where &lt;code>CNAME&lt;/code> fits in.&lt;/p>
&lt;h2 id="bonus-tld-redirection">Bonus: TLD Redirection&lt;/h2>
&lt;p>Let me tell you a story. Your website is up and operational. You&amp;rsquo;re super proud of it, and you give yourself a round of applause 👏&lt;/p>
&lt;p>But you don&amp;rsquo;t want to be the only person looking at it, you want the whole world to! You tell your parents, your significant other, the dog off the street - they all remember the name of your website, but &lt;em>was it at &lt;code>.com&lt;/code> or &lt;code>.&amp;lt;insert snazzy TLD here&amp;gt;&lt;/code>&lt;/em>?&lt;/p>
&lt;p>Of course, you domain isn&amp;rsquo;t at &lt;code>.com&lt;/code>, that&amp;rsquo;s boring as hell! You just forked out $50 on a &lt;code>.dev&lt;/code> TLD, and no one will see it!&lt;/p>
&lt;p>Luckily there is a way&amp;hellip;&lt;/p>
&lt;p>You can buy additional domains at different TLDs and have them redirect to your &lt;em>one-domain-to-rule-them-all&lt;/em> with little to no hassle! There is the cost of purchasing the domain and renewing it year after year, but with that being ~£10 or so per year - I&amp;rsquo;d call that a good insurance policy to ensure people land at your website!&lt;/p>
&lt;p>In my case, I purchased &lt;code>jdheyburn.com&lt;/code> and had it redirect to &lt;code>jdheyburn.co.uk&lt;/code> - why not give it a try: &lt;a href="https://jdheyburn.com">https://jdheyburn.com&lt;/a>&lt;/p>
&lt;p>The steps are already defined in this post. For a breakdown of what they are:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="#acquire-a-domain">Purchase a domain&lt;/a>&lt;/li>
&lt;li>&lt;a href="#cloudflare-our-domain">Create a new website in Cloudflare&lt;/a>&lt;/li>
&lt;li>&lt;a href="#update-cloudflare-dns-records">Create a DNS A record to redirect to your correct domain&lt;/a>&lt;/li>
&lt;li>&lt;a href="#direct-namecheap-to-cloudflare">Configure Namecheap to use Cloudflare&amp;rsquo;s nameservers&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>Steps 1 and 2 are pretty easy to perform yourselves - so for this exercise I&amp;rsquo;ll join in at step 3.&lt;/p>
&lt;h2 id="cloudflare-domain-redirection">Cloudflare Domain Redirection&lt;/h2>
&lt;p>Assuming that you&amp;rsquo;ve completed steps 1 and 2, we&amp;rsquo;ll need to configure the redirection - but we don&amp;rsquo;t do this via inserting a DNS record like we did previously, Cloudflare has a feature that handles that for us called &lt;strong>Page Rules&lt;/strong>.&lt;/p>
&lt;p>On your Cloudflare website landing page, navigate to &lt;strong>Page Rules&lt;/strong> in the toolbar at the top and then &lt;strong>Create Page Rule&lt;/strong>.&lt;/p>
&lt;figure>
&lt;img src="cloudflare_page_rules.png"
alt="Screenshot depicting how to access the Create Page Rule feature"/>
&lt;/figure>
&lt;p>In the next screen we&amp;rsquo;re going to define the rule. Cloudflare have &lt;a href="https://support.cloudflare.com/hc/en-us/categories/200276257-Page-Rules">documentation on Page Rules&lt;/a>, and even more &lt;a href="https://support.cloudflare.com/hc/en-us/articles/200172286-Configuring-URL-forwarding-or-redirects-with-Cloudflare-Page-Rules">specifically on redirection&lt;/a>.&lt;/p>
&lt;p>From this screen you will want something that appears as below.&lt;/p>
&lt;figure>
&lt;img src="cloudflare_new_page_rule.png"
alt="Screenshot depicting how to populate the Create Page Rule form"/>
&lt;/figure>
&lt;p>Let&amp;rsquo;s break down what&amp;rsquo;s happening here:&lt;/p>
&lt;ol>
&lt;li>We define a pattern of &lt;code>*jdheyburn.com/*&lt;/code>, indicating that the rule is active should a URL be queried to Cloudflare&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>This pattern will match any request at this domain&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Next comes the rule action, which is:&lt;/li>
&lt;li>Set this URL as a forwarding URL - to reply back to the client with &lt;code>301 Permanent Redirect&lt;/code> status code&lt;/li>
&lt;li>With the forwarded URL being &lt;code>https://jdheyburn.co.uk/$2&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>The &lt;code>/$2&lt;/code> at the end of the rule is crucial here. This will carry across any URL path parameters or query parameters to the redirected URL. In fact &lt;code>$2&lt;/code> refers to anything that matches the second asterisk (&lt;code>*&lt;/code>) in the rule pattern (&lt;code>*jdheyburn.com/*&lt;/code>). So &lt;code>https://jdheyburn.com/contact&lt;/code> will redirect to &lt;code>https://jdheyburn.co.uk/contact&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>Having the forwarded URL set to the &lt;code>https://&lt;/code> scheme will ensure that your users will receive your website encrypted, safe from man-in-the-middle attacks.&lt;/p>
&lt;/blockquote>
&lt;p>Lastly, click on &lt;strong>Save and Deploy&lt;/strong> to finalise your changes; you&amp;rsquo;ll have a view such as below.&lt;/p>
&lt;figure>
&lt;img src="cloudflare_completed_page_rule.png"
alt="Screenshot depicting the newly created page rule"/>
&lt;/figure>
&lt;p>That&amp;rsquo;s all you need - once again you will have to wait for DNS replication to trickle down. You can repeat this over again for other domains you may have.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>That it for this part, we covered quite a lot of things:&lt;/p>
&lt;ul>
&lt;li>Purchasing a custom domain&lt;/li>
&lt;li>Applying a CDN cache layer&lt;/li>
&lt;li>HTTPS redirection&lt;/li>
&lt;li>Redirect multiple domains to one location&lt;/li>
&lt;/ul>
&lt;p>Next up I&amp;rsquo;ll document the various deployment methods I have used for the website.&lt;/p></description></item><item><title>Who Goes Blogging 1: Getting Started</title><link>https://jdheyburn.co.uk/blog/who-goes-blogging-1-getting-started/</link><pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/who-goes-blogging-1-getting-started/</guid><description>&lt;p>I&amp;rsquo;ve done a lot of talking about how this website is currently, but let&amp;rsquo;s talk about how you can get set up with the same as I have done here. Let&amp;rsquo;s recap exactly what that is:&lt;/p>
&lt;ol>
&lt;li>A GitHub repo with the site source code&lt;/li>
&lt;li>Another GitHub project with the rendered site&lt;/li>
&lt;li>Hosted on GitHub Pages&lt;/li>
&lt;li>Fronted by a custom domain&lt;/li>
&lt;li>Globally cached by a CDN&lt;/li>
&lt;li>Redirecting multiple domains&lt;/li>
&lt;/ol>
&lt;p>We&amp;rsquo;ll cover the first three points in this post, with the remainder to come in a follow up post.&lt;/p>
&lt;h2 id="pre-requisites--assumptions">Pre-requisites &amp;amp; Assumptions&lt;/h2>
&lt;p>These series of posts is aimed at between the newcomer, to intermediate programmer. There may be some concepts which I won&amp;rsquo;t be covering to due brevity, and because there are several guides out there who have explained these concepts better than I could.&lt;/p>
&lt;p>Having said that, I assume you are comfortable with the following:&lt;/p>
&lt;ul>
&lt;li>Navigating your way through a terminal&lt;/li>
&lt;li>Happy with the basic set of &lt;code>git&lt;/code> commands&lt;/li>
&lt;li>Understand how website requests are made (though this isn&amp;rsquo;t crucial)&lt;/li>
&lt;/ul>
&lt;h2 id="hugo-static-site-builder">Hugo Static Site Builder&lt;/h2>
&lt;p>There are many website building platforms out there for your static sites. There is no one platform to rule them all, you should decide on which one works best for you. For myself, I wanted to explore further into the realm of Golang as a learning opportunity. I&amp;rsquo;ve built websites from scratch before from basic HTML, CSS, and JavaScript all the way to using frameworks such as React and Angular.&lt;/p>
&lt;p>However while using these frameworks provide you with the highest flexibility in terms of customisability, they can take a while to get something out there and hosted, when really you just want something to generate the HTML and CSS for you and allow you to focus on the content.&lt;/p>
&lt;p>That&amp;rsquo;s where static site frameworks come in. They usually have some opinionated folder structure and some nuances on how things in a website should be, but comply by these rules and the website will be generated for you! Once such example is &lt;a href="https://gohugo.io/">Hugo&lt;/a> - which is what this website is built on; it&amp;rsquo;s opensource and written in Golang, you can even check out the &lt;a href="https://github.com/gohugoio/hugo">source code&lt;/a> to see how it works!&lt;/p>
&lt;blockquote>
&lt;p>While Hugo itself is free and comes with a bunch of &lt;a href="https://themes.gohugo.io/">themes&lt;/a> you can use for free, there are fancier and more feature-rich themes available to purchase from designers which may have a cost attached to them.&lt;/p>
&lt;/blockquote>
&lt;p>Hugo isn&amp;rsquo;t the only static site framework out there, there are plenty more too each with their own pros and cons. I won&amp;rsquo;t aim to reproduce a complete list of comparisons against other platforms, other people have already made the comparisons much better than I could! But nevertheless, some that I am aware of off the top of my head are &lt;a href="https://jekyllrb.com/">Jekyll&lt;/a>, &lt;a href="https://ghost.org/">Ghost&lt;/a>, and the infamous &lt;a href="https://wordpress.com/">WordPress&lt;/a> - so investigate using your search engine of choice if you wish to know the differences.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>UPDATE 2019-11-30&lt;/strong>&lt;/p>
&lt;p>I came across &lt;a href="https://news.ycombinator.com/item?id=21616149">this thread&lt;/a> on HackerNews which ultimately lead me to these comparison websites for static site generators:&lt;/p>
&lt;p>&lt;a href="https://www.staticgen.com/">https://www.staticgen.com/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://staticsitegenerators.net/">https://staticsitegenerators.net/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>All set on Hugo? Awesome - let&amp;rsquo;s get started on some project foundations.&lt;/p>
&lt;h2 id="git-set-up">Git Set Up&lt;/h2>
&lt;p>I mentioned before I split my website into two repos:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jdheyburn/jdheyburn.co.uk">jdheyburn.co.uk&lt;/a> holds all the source code&lt;/li>
&lt;li>&lt;a href="https://github.com/jdheyburn/jdheyburn.github.io">jdheyburn.github.io&lt;/a> holds the rendered website&lt;/li>
&lt;/ul>
&lt;p>For the first repo, it doesn&amp;rsquo;t really matter what you call it - you can call it your destined domain name, or &lt;code>blog-source&lt;/code>, or &lt;code>dogs-are-great&lt;/code>. It&amp;rsquo;s the second one which you will need to think about, where it must be &lt;code>&amp;lt;YOUR_USERNAME&amp;gt;.github.io&lt;/code> - which will ultimately be made available at &lt;code>https://&amp;lt;YOUR_USERNAME&amp;gt;.github.io&lt;/code>.&lt;/p>
&lt;p>Create two &lt;a href="https://github.com/new">empty Github repos now&lt;/a>, then clone both to your environment. If you don&amp;rsquo;t have git available in your terminal, check out &lt;a href="https://help.github.com/en/github/getting-started-with-github/set-up-git">this guide&lt;/a> to get set up.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir ~/projects
&lt;span style="color:#24909d">cd&lt;/span> projects
git clone https://github.com/&amp;lt;USERNAME&amp;gt;/blog-source.git
git clone https://github.com/&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io.git
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now that we have the repos set up, let&amp;rsquo;s get started on building the website templates.&lt;/p>
&lt;h2 id="blog-bootstrapping">Blog Bootstrapping&lt;/h2>
&lt;p>Before you get started, you&amp;rsquo;re going to need to install Hugo - head to &lt;a href="https://gohugo.io/getting-started/installing">this page&lt;/a> for instructions on going so. Once done continue on below.&lt;/p>
&lt;p>Firstly you would need to create your Hugo template. You can do this from either executing &lt;code>hugo new &amp;lt;site|theme&amp;gt;&lt;/code> and building up from there - or do what I did which was to browse the &lt;a href="https://themes.gohugo.io/">Hugo themes&lt;/a> and &lt;code>git clone&lt;/code> the example site for the chosen theme and then make your changes around that. It may entirely depend on your learning approach which way works best for you.&lt;/p>
&lt;p>In my case, I wanted to get up and running in the smallest time possible (isn&amp;rsquo;t that the point of static site generators?), so I followed the approach above.&lt;/p>
&lt;h3 id="serves-up">Serves Up!&lt;/h3>
&lt;p>The theme this blog uses as of publication is &lt;a href="https://themes.gohugo.io/hugo-coder/">hugo-coder&lt;/a>, written by &lt;a href="https://luizdepra.dev/">Luiz de Prá&lt;/a>. You may wish to use it, or something else. It&amp;rsquo;s entirely up to you! Let&amp;rsquo;s get started by laying down the foundations and cloning the theme.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#24909d">cd&lt;/span> ~/projects
git clone https://github.com/luizdepra/hugo-coder.git
cp -r hugo-coder/exampleSite blog-source
mkdir blog-source/themes
ln -s ~/projects/hugo-coder blog-source/themes/hugo-coder
&lt;span style="color:#24909d">cd&lt;/span> blog-source
hugo serve
&lt;/code>&lt;/pre>&lt;/div>&lt;p>That last command will locally serve the example site, so that you can view it at &lt;code>http://localhost:1313/&lt;/code>.&lt;/p>
&lt;figure>
&lt;img src="local_example_site.jpg"
alt="Screenshot depicting the locally run example site"/> &lt;figcaption>
&lt;p>Success!&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="experimenting">Experimenting&lt;/h3>
&lt;p>Once you have the site hosted locally, feel free to make as many changes as you like to gain an understanding of how everything plugs together.&lt;/p>
&lt;p>The &lt;code>blog-template/config.toml&lt;/code> file will contain the majority of configurations that are used to generate the site. Go ahead and even comment out some config and see what affect that has. You can even &lt;a href="https://github.com/jdheyburn/jdheyburn.co.uk/blob/master/config.toml">be nosey at my config file&lt;/a> if you&amp;rsquo;re looking for some inspiration! The &lt;code>hugo serve&lt;/code> command will watch all files in the directory for any changes you make, rebuild them, and refresh your webpage too with the changes - making for hasty development!&lt;/p>
&lt;p>The Hugo config file will be a source of many informations, and the &lt;a href="https://gohugo.io/getting-started/configuration/">documentation for it is very thorough&lt;/a>. While we&amp;rsquo;re on the subject, the rest of the Hugo documentation is great, so check the rest of it out if you haven&amp;rsquo;t done so already - particularly how the &lt;a href="https://gohugo.io/getting-started/directory-structure/">directories are structured&lt;/a>, and how &lt;a href="https://gohugo.io/content-management/">content is managed&lt;/a>.&lt;/p>
&lt;p>I advise you now go off and explore all the customisation options for your site, when you&amp;rsquo;re ready to have it deployed, continue on reading.&lt;/p>
&lt;h3 id="theme-git-submodules">Theme Git Submodules&lt;/h3>
&lt;p>When we were setting up the &lt;code>exampleSite&lt;/code> locally, we created a symlink from &lt;code>~/projects/blog-source/themes/hugo-coder&lt;/code> -&amp;gt; &lt;code>~/projects/hugo-coder&lt;/code>. This is okay for local development, however not particularly the best practice in the real world. We want to take an existing git repo (hugo-coder) and apply that to a directory in our project, but what we &lt;em>don&amp;rsquo;t&lt;/em> want to do is duplicate the code in our own repo.&lt;/p>
&lt;p>This problem is solved exactly by &lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">&lt;strong>git submodules&lt;/strong>&lt;/a>, and we define it within the &lt;code>.gitmodules&lt;/code> file of our source code repo.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#999;font-style:italic"># .gitmodules&lt;/span>
[submodule &lt;span style="color:#ed9d13">&amp;#34;themes/hugo-coder&amp;#34;&lt;/span>]
&lt;span style="color:#40ffff">path&lt;/span> = themes/hugo-coder
&lt;span style="color:#40ffff">url&lt;/span> = https://github.com/luizdepra/hugo-coder.git
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now when this file is checked into the repo, any future clones will also include the hugo theme as a submodule in the &lt;code>themes/hugo-coder&lt;/code> directory.&lt;/p>
&lt;p>Once you&amp;rsquo;ve done this, your source code is all set! Why not share it with the rest of the world?&lt;/p>
&lt;h2 id="releasing-into-the-wild">Releasing into the wild&lt;/h2>
&lt;p>So far we have only been playing with the &lt;code>hugo serve&lt;/code> command, which is great for local development but not for production. There is a more appropriate command for building hugo projects - aptly named &lt;code>hugo&lt;/code>; pretty simple right?&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">hugo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This renders the HTML and CSS files from your config and markdown for the theme and places them in the &lt;code>public/&lt;/code> directory of your source code repo. In theory once you&amp;rsquo;ve executed this command you can host a webserver at that address and everything would operate as normal. Why not give it a try?&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#24909d">cd&lt;/span> public/
python -m SimpleHTTPServer &lt;span style="color:#3677a9">8080&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can even go one step further by adding flags to the &lt;code>hugo&lt;/code> command, such as &lt;code>--minify&lt;/code> which will minimalise all the supported files into a much smaller size, resulting in faster load times for your users.&lt;/p>
&lt;p>Since we are still in our source code repo, we want to make sure that &lt;code>public/&lt;/code> directory doesn&amp;rsquo;t get included in future commits. This is because the &lt;code>blog-source&lt;/code> repo should be entirely for source code, our other repo is the one that holds the rendered code.&lt;/p>
&lt;p>For this we can utilise a &lt;code>.gitignore&lt;/code> file, instructing git to ignore any files that match the terms in the contents. Let&amp;rsquo;s get one created now and check our code into the repo.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#24909d">echo&lt;/span> &lt;span style="color:#ed9d13">&amp;#34;public/\nresources/&amp;#34;&lt;/span> &amp;gt; .gitignore
git add .
git commit -m &lt;span style="color:#ed9d13">&amp;#39;Initial commit&amp;#39;&lt;/span>
git push
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;re currently committing to one repo, however we want GitHub Pages to host it for us. As mentioned earlier, GP can only host repos at the domain &lt;code>github.io&lt;/code>, so we need to get our rendered website into that repo.&lt;/p>
&lt;h3 id="bash-script-deploying">Bash Script Deploying&lt;/h3>
&lt;p>Now the original way I did this was through a simple bash script which largely followed &lt;a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#step-by-step-instructions">this process&lt;/a> as documented by the Hugo team. Note that this is largely the process we have followed thus far, with the exception of step 6 onwards - so ensure you follow those steps.&lt;/p>
&lt;blockquote>
&lt;p>I&amp;rsquo;ve since moved over onto a CI/CD platform which I will discuss in a future post.&lt;/p>
&lt;/blockquote>
&lt;p>After following the process in the link prior, you should be able to invoke your deploy script at &lt;code>./deploy.sh&lt;/code>, which will push the built &lt;code>public/&lt;/code> directory to your &lt;code>&amp;lt;USERNAME&amp;gt;.github.io&lt;/code>. GitHub should pick up that this is a GitHub Pages repo and have your site ready for you at &lt;code>https://&amp;lt;USERNAME&amp;gt;.github.io&lt;/code>!&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>In this post, we have done the following:&lt;/p>
&lt;ol>
&lt;li>Created two GitHub repos:
&lt;ul>
&lt;li>one for storing the source code for the website&lt;/li>
&lt;li>another containing the rendered web pages&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Built Hugo locally for development using &lt;code>hugo serve&lt;/code>&lt;/li>
&lt;li>Written a script for deployment&lt;/li>
&lt;li>Deployed to GitHub Pages&lt;/li>
&lt;/ol>
&lt;p>Next up, we&amp;rsquo;ll be adding a custom domain to the site, front it with a CDN, and redirect multiple domains to it.&lt;/p></description></item><item><title>Who Goes Blogging 0: Applying Cartography</title><link>https://jdheyburn.co.uk/blog/who-goes-blogging-0-applying-cartography/</link><pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/who-goes-blogging-0-applying-cartography/</guid><description>&lt;h2 id="applying-cartography">Applying Cartography&lt;/h2>
&lt;p>With my academic background focused in infrastructure, I love seeing diagrams of topologies - they&amp;rsquo;re a pretty damn useful way of understanding architecture of an application flow amongst other things. Let&amp;rsquo;s take a look at how my portfolio site is architected out.&lt;/p>
&lt;p>As I mentioned in my &lt;a href="https://jdheyburn.co.uk/posts/blog-bootstrap/">first blog post&lt;/a> - I&amp;rsquo;ve got several ideas on how I can improve on the architecture of this site. But what good is evaluating where you&amp;rsquo;ve come from if you don&amp;rsquo;t document what you currently have?&lt;/p>
&lt;p>That&amp;rsquo;s when you can make true comparisons in any system. As such the aim of this series of posts will be to explain how this website is architected, so that we may reference it in future posts. Later on, I&amp;rsquo;ll also talk about how you&amp;rsquo;re able to get yourself set up as well.&lt;/p>
&lt;h3 id="the-setup">The Setup&lt;/h3>
&lt;p>Because we all love an architecture diagram, let&amp;rsquo;s slap one in now.&lt;/p>
&lt;figure>
&lt;img src="blog-arch-cover.png"
alt="An architecture diagram of my portfolio site"/>
&lt;/figure>
&lt;p>Wow. That is&amp;hellip; really not much at all. Apologies if you were expecting a lot more arrows and boxes!&lt;/p>
&lt;p>In a way, I shouldn&amp;rsquo;t be sorry, because one of the core priniciples in software development is KISS (Keep It Simple Stupid!) - and this setup is just an advantage of how I decided the first implementation of my website to be:&lt;/p>
&lt;ul>
&lt;li>Easy to implement&lt;/li>
&lt;li>Easy to maintain (there is none required!)&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;m a firm believer that you&amp;rsquo;re best off getting a minimum viable product out there ASAP and then work to perfect it afterward. What I hope to document as time goes on are the various enhancements and changes that I intend on making to the website so that yourselves can follow along too with your own site. That goes not just for this site (how much can it really be improved?!) but for whatever projects I work on.&lt;/p>
&lt;h2 id="so-what-does-it-all-mean">So what does it all mean?&lt;/h2>
&lt;p>Back to the diagram, let&amp;rsquo;s follow it from right-to-left and start talking about what&amp;rsquo;s going on.&lt;/p>
&lt;h3 id="github-pages---somewhere-to-call-home">GitHub Pages - somewhere to call home&lt;/h3>
&lt;p>You can see that the site is hosted on GitHub Pages. Essentially this is GitHub&amp;rsquo;s platform for hosting the static resources that are checked into the public repos. This then presents the assets at a domain prefix of your choosing, suffixed by &lt;code>.github.io&lt;/code> - in my case it is at &lt;code>jdheyburn.github.io&lt;/code>. GitHub Pages only hosts your site via HTTPS so you know your pages aren&amp;rsquo;t being subject to a man-in-the-middle attack, and it takes care of your TLS certificates so you don&amp;rsquo;t need to worry about renewing them!&lt;/p>
&lt;blockquote>
&lt;p>You might be wondering why you would need to serve a static site over HTTPS when you aren&amp;rsquo;t handling anything confidential. I&amp;rsquo;ll turn you to Troy Hunt&amp;rsquo;s excellent article &lt;a href="https://www.troyhunt.com/heres-why-your-static-website-needs-https/">Here&amp;rsquo;s Why Your Static Website Needs HTTPS&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h3 id="supercharge-your-delivery">Supercharge your delivery!&lt;/h3>
&lt;p>Now that the website is hosted at GitHub - I stuck a content delivery network (CDN) in front of GitHub for a whole load of reasons, some of which are:&lt;/p>
&lt;h4 id="fast-end-user-response-times">Fast end-user response times&lt;/h4>
&lt;p>CDNs cache your content at edge locations dotted all over the globe, where the client is then served content from the one closest geographically (let me direct you to &lt;a href="https://people.eecs.berkeley.edu/~rcs/research/interactive_latency.html">latency numbers every programmer should know&lt;/a>).&lt;/p>
&lt;h4 id="security">Security&lt;/h4>
&lt;p>The CDN acts as a proxy between the client and your servers - their requests don&amp;rsquo;t actually hit you directly.&lt;/p>
&lt;p>Not only that, a lot of CDNs provide DDoS protection to ensure excessive requests don&amp;rsquo;t bring down your servers.&lt;/p>
&lt;h4 id="analytics">Analytics&lt;/h4>
&lt;p>Because everyone loves graphs and numbers&amp;hellip; right??&amp;hellip; Alright just me then&amp;hellip;&lt;/p>
&lt;p>You&amp;rsquo;ll be able to see how many requests are being served up, where requests originate from, amongst others. Take a look at an example below.&lt;/p>
&lt;figure>
&lt;img src="analytics_example.png"
alt="A graph displaying total requests, and how many of them were cached"/>
&lt;/figure>
&lt;h4 id="custom-domain">Custom domain&lt;/h4>
&lt;ul>
&lt;li>This means you can access your site on something other than &lt;code>&amp;lt;my_site&amp;gt;.github.io&lt;/code>, which is great for when you move off GitHub Pages to another platform, you can just tell Cloudflare to source requests from another server&lt;/li>
&lt;li>It also gives your site that extra polish and professionalism about it - wouldn&amp;rsquo;t you agree?&lt;/li>
&lt;/ul>
&lt;p>My CDN of choice is &lt;a href="https://www.cloudflare.com/">Cloudflare&lt;/a>, for no reason more than is it completely free to use and will most likely stay free until I decide I would benefit from the next &lt;a href="https://www.cloudflare.com/en-gb/plans/">pricing step&lt;/a>. Did I mention the website is pretty damn easy to use as well?&lt;/p>
&lt;p>That means that the operating cost of a site like this is exactly ZILCH (nada, et al.), which again is another great reason to get set up on a platform like this.&lt;/p>
&lt;h3 id="top-level-domain-fatigue">Top-level domain fatigue?&lt;/h3>
&lt;p>I&amp;rsquo;m from the UK - and I wanted my site to reflect that, so I purchased a domain with the top-level domain (TLD) &lt;code>.co.uk&lt;/code>. However when users come to visit me on my site they may not always remember whether it was &lt;code>.com&lt;/code>, &lt;code>.dev&lt;/code>, &lt;code>.tk&lt;/code> (remember those?). Therefore I also have &lt;code>jdheyburn.com&lt;/code> set up in the same way as its &lt;code>.co.uk&lt;/code> sibling to maximise that user experience.&lt;/p>
&lt;p>Okay well that means there is a slight cost to maintain the site through purchasing and renewing the custom domains (notice how jdheyburn.com redirects to jdheyburn.co.uk?) but we&amp;rsquo;re talking in the £10s per year for these two.&lt;/p>
&lt;p>So if you&amp;rsquo;re interested in having a setup like this, then over the next few posts I&amp;rsquo;ll be detailing how you can do the same.&lt;/p>
&lt;p>- jdheyburn&lt;/p></description></item></channel></rss>