<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Who Goes Blogging on JDHeyburn</title><link>https://jdheyburn.co.uk/series/who-goes-blogging/</link><description>Recent content in Who Goes Blogging on JDHeyburn</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 31 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://jdheyburn.co.uk/series/who-goes-blogging/index.xml" rel="self" type="application/rss+xml"/><item><title>Who Goes Blogging 4: Content Structure &amp; Refactoring</title><link>https://jdheyburn.co.uk/blog/who-goes-blogging-4-content-structure-and-refactoring/</link><pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/who-goes-blogging-4-content-structure-and-refactoring/</guid><description>So far in this series we&amp;rsquo;ve been looking at the infrastructure behind the Hugo website, but I haven&amp;rsquo;t looked into improving the content layout of the site. Some of the improvements I want to make are:
Moving content articles from a flat structure to a leaf bundle Rename content section to blog from posts Upgrading hugo-coder theme and hugo version Adding a table of contents to the pages &amp;hellip; and further improvements as I find them This post will cover items 1-2, the others will be in a follow up post.</description></item><item><title>Who Goes Blogging 3.2: Deployment Methods - GitHub Actions</title><link>https://jdheyburn.co.uk/blog/who-goes-blogging-3-2-deployment-methods-github-actions/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/who-goes-blogging-3-2-deployment-methods-github-actions/</guid><description>From TravisCI to GitHub Actions In the previous post we looked at moving to a CI/CD model by moving from the deploy.sh script to TravisCI.
In this post we will look at how we can migrate from TravisCI to GitHub Actions, GitHub&amp;rsquo;s own CI/CD tool.
This post will also be useful if you are looking to onboard GitHub Actions as your CI/CD pipeline! ðŸš€
Benefits âœ… Let&amp;rsquo;s talk about why we want to migrate away from TravisCI in the first place.</description></item><item><title>Who Goes Blogging 3.1: Deployment Methods - TravisCI</title><link>https://jdheyburn.co.uk/blog/who-goes-blogging-3-1-deployment-methods-travisci/</link><pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/who-goes-blogging-3-1-deployment-methods-travisci/</guid><description>Recap Since part 1, we have been using a simple bash script called deploy.sh to build our Hugo website and upload it to our GitHub Pages repo. In part 2 we modified it slightly to include the CNAME file post-build to ensure GitHub Pages uses the custom domain we set up in that same part.
For this part, I will tell you about how I migrated from deploying via a script, to a CI/CD tool - namely TravisCI.</description></item><item><title>Who Goes Blogging 2: Custom Domain</title><link>https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/</link><pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/who-goes-blogging-2-custom-domain/</guid><description>In the previous post, we got ourselves up and running with a website generated by Hugo, deployed to GitHub, and hosted by GitHub Pages.
Now, we&amp;rsquo;re going to add a custom domain to our website so that we hide the &amp;lt;username&amp;gt;.github.io domain that GitHub Pages is kindly hosting for us for free.
At the same time, we&amp;rsquo;re going to make our website blazingly fast for users by adding a caching layer with a content distribution network (CDN).</description></item><item><title>Who Goes Blogging 1: Getting Started</title><link>https://jdheyburn.co.uk/blog/who-goes-blogging-1-getting-started/</link><pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/who-goes-blogging-1-getting-started/</guid><description>I&amp;rsquo;ve done a lot of talking about how this website is currently, but let&amp;rsquo;s talk about how you can get set up with the same as I have done here. Let&amp;rsquo;s recap exactly what that is:
A GitHub repo with the site source code Another GitHub project with the rendered site Hosted on GitHub Pages Fronted by a custom domain Globally cached by a CDN Redirecting multiple domains We&amp;rsquo;ll cover the first three points in this post, with the remainder to come in a follow up post.</description></item><item><title>Who Goes Blogging 0: Applying Cartography</title><link>https://jdheyburn.co.uk/blog/who-goes-blogging-0-applying-cartography/</link><pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate><guid>https://jdheyburn.co.uk/blog/who-goes-blogging-0-applying-cartography/</guid><description>Applying Cartography With my academic background focused in infrastructure, I love seeing diagrams of topologies - they&amp;rsquo;re a pretty damn useful way of understanding architecture of an application flow amongst other things. Let&amp;rsquo;s take a look at how my portfolio site is architected out.
As I mentioned in my first blog post - I&amp;rsquo;ve got several ideas on how I can improve on the architecture of this site. But what good is evaluating where you&amp;rsquo;ve come from if you don&amp;rsquo;t document what you currently have?</description></item></channel></rss>